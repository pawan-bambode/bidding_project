<%- include('../partials/head') %>
<%- include('../partials/leftSidebarForStudent.ejs') %>
<%- include('../partials/header.ejs') %>

<main>
    <div class="main-content">
        <div class="card card-custom-border-curv round-message-container mt-3">
            <div class="round-message">
                <div class="card-header-custom d-flex justify-content-between">
                    <h4 class="ms-2 round-name">
                        <%= currentRoundStatus.round_status === 'Round Not Found' ? 'Bidding Round' : currentRoundStatus.roundName %>
                    </h4>    
                </div>
                <div class="card-body table-responsive d-flex justify-content-center align-items-center">
                    <% if (currentRoundStatus.round_ended == 1) {  %>
                        <p>This Round Has Ended!</p>
                    <% } else if (currentRoundStatus.round_status == 'Round Not Found') { %>
                        <p>Round Not Found!</p>
                    <% } %>
                </div>
            </div>
        </div>
        
        <div class="round-basic-details<%= (currentRoundStatus.round_not_started_yet == 1) ? '' : ' d-none' %>">
            <ul class="d-flex round-wises justify-content-between align-items-end">
                <li class="ms-5 active">
                    <a class="text-decoration-none text-dark">
                        <div class="d-flex flex-column justify-content-center align-items-center h-100">
                            <div class="d-flex justify-content-between align-items-center active-div">
                                <h4 class="ms-2 round-name" data-round-id="<%- roundDetails.round_lid %>"><%- roundDetails.roundName %></h4>
                            </div>
                        </div>
                    </a>
                </li>
            </ul>
             
            <div class="main-div-round-wise card-custom-border-curv p-3">
                <div class="card-header-custom d-flex justify-content-between p-1">
                    <h5 class="ms-2 round-name"><%- roundDetails.roundName %></h5>
                    <h5 class="time-remaining my-0 mx-1"></h5>
                </div>
                <div class="card-body table-responsive">
                    <div class="row ps-5 pe-5">
                        <div class="col-md-4">
                            <h6>Minimum / Maximum Yearly Credits : 
                                <span id="yearly-credits"><%- concentrationSet.totalCredits %></span>
                            </h6>
                        </div>
                        <div class="col-md-4 round-not-started-one-days">
                            <h6>Total Bid Points : 
                                <span id="total-bid-points"> <%- studentBidsPoints.student_bid_points %></span>
                            </h6>
                        </div>
                        
                        <div class="col-md-4">
                            <h6>Remaining Bid Points : 
                                <span class="remaining-bid-points"><%- remaingBidPoints.student_bid_points %>
                            </h6>
                        </div>
                    
                    </div>
                    <div class="row ps-5 pe-5">
                        <% for (let acadSessionCredit of acadSessionsWiseCredits) { %>
                            <div class="col-md-4">
                                <h6><%- acadSessionCredit.name %> 
                                    Credits :
                                    <span class="credits-point-target" id="credits-points-target-<%- acadSessionCredit.id %>" data-id="<%-acadSessionCredit.id %>"><%-
                                        acadSessionCredit.credits %></span>
                                </h6>
                            </div>
                        <% } %>
                    </div>
                  
                    <div class="row ps-5 pe-5">
                        <div class="col-md-4">
                            <h6>Start Time :&nbsp;
                                <span id="start-time"><%- roundDetails.startTime %></span>
                            </h6>
                        </div>
                        <div class="col-md-4">
                            <h6>End Time :&nbsp;
                                <span id="end-time"><%- roundDetails.endTime %></span>
                            </h6>
                        </div>
                        <div class="col-md-4">
                            <h6>Current Time : &nbsp;
                                <span id="current-date-time"></span>
                            </h6>
                        </div>
                    </div>
                </div>
            </div>
        </div> 
    
        <div class="round-wise-details<%= (currentRoundStatus.round_started == 1) ? '' : ' d-none' %>">
        
            <div class="card card-custom-border-curv mt-3">
                <div class="card-header-custom d-flex justify-content-between p-1">
                    <h4 class="ms-2">Bidding Course</h4>
                    
                        <div class="border border-light rounded me-3">
                           <button class="btn text-light" id="view-confirmed-course" >
                            View Confirmed Courses
                           </button>          
                        </div>
            
                </div>
            <div class="shadow-sm">    
                <div class="credit-status d-flex justify-content-around align-items-center flex-md-row flex-column mx-3 mt-2">
               
                    <div class="flex-grow-1 text-center">
                        Areas To Cover:
                        <%- concentrationSet.noofAreasToCover %>
                    </div>
                    <% if(concentrationSet.primaryArea != 'NA') { %>
                        <div class="flex-grow-1 text-center">
                            Min. Credits in Primary Area:
                            <%-concentrationSet.minCreditsInPriArea %>
                        </div>
                    <% } %>
                    <div class="flex-grow-1 text-center">
                        Min. Credits Per Area:
                        <%- concentrationSet.minCreditsPerArea %>
                    </div>
             
                    <div class="flex-grow-1 text-center">
                        Max. Credits Per Area:
                    <%- concentrationSet.maxCreditsPerArea %>
                    </div>
                </div>
                <div class="col-md-3 mt-4 mb-2 ms-5">
                    <select class="form-select form-control bidding-acad-session" id="bidding-acad-session">
                        <option value="1">Select All</option>
                        <option value="34">Trimester IV</option>
                        <option value="35">Trimester V</option>
                        <option value="36">Trimester VI</option>
                    </select>
                </div>
            </div> 
                <div class="card-body table-responsive selected-course-container">
                    <table class="table table-bordered mt-4" id="bidding-table">
                        <thead>
                            <th>#</th>
                            <th>Area</th>
                            <th>Course</th>
                            <th>Acad Session</th>
                            <th>Credits</th>
                            <th>Available Seats</th>
                            <th>Total Bidders</th>
                            <th>MRB</th>
                            <th>Winning status</th>
                            <th>Your Bid</th>
                            <th>Change Bid</th>
                            <th>Withdraw</th>
                        </thead>
                        <tbody>
                        
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card card-custom-border-curv mt-3" id="bidding-modal">
                <div class="card-header-custom d-flex justify-content-between p-1">
                    <h4 class="ms-2">Available Courses</h4>
                </div>
                <div class="card-body table-responsive">
                
                    <div class="row">
                        <div class="col-md-3 mt-4 ms-2">
                            <select class="form-select form-control select2" id="acad-session-change">
                                <option selected disabled value="-1">--Select Acad Session-- </option>
                                <option value="0">Select All</option>
                                    <%for(let acadSession of acadSessionsWiseCredits) { %>
                                        <option value="<%- acadSession.id %>"><%- acadSession.name %></option>
                                    <% } %>
                            </select>
                        </div>
                        <div class="col-md-3 mt-4 ms-2">
                            <select class="form-select form-control select2 d-none" id="area-change">
                                <option value="-1" selected>Select Area</option>
                                    <% for (let area of areaList) { %>
                                        <option value="<%-area.area_name %>"><%-area.area_name %></option>
                                    <% } %>
                            </select>
                        </div>
                        <div class="col-md-3 mt-4 ms-2">
                            <select class="form-select form-control select2 d-none" id="course-filter">
                                <option value="-1" selected>Select Course</option>
                            </select>
                        </div>
                    </div>
                
                    <table class="table table-bordered mt-4" id="available-course-table">
                        <thead>
                            <th>#</th>
                            <th>Area</th>
                            <th>Course</th>
                            <th>Trimester</th>
                            <th>Course Timings</th>
                            <th>Credits</th>
                            <th>Available Seats</th>
                            <th>Total Bidders</th>
                            <th>MRB</th>
                            <th>Action</th>
                        </thead>        
                        <tbody>
                        </tbody>
                    </table>
                </div>
                <div class="ms-2">
                    <p>Total entries :&nbsp;
                        <span id="page-no"></span>
                    </p>
                </div>
            </div> 
        </div>        
    </div> 
    
    <div class="confirmed-course-container d-none">
        <div class="confirmed-course-content">
            <button type="button" class="btn-close close-btn" data-bs-dismiss="modal" aria-label="Close"></button>
            <p>This is the content of the div.</p>  
        </div>
    </div>
</main> 

<footer>
    <div class="student-footer text-center">
        <div class="student-footer-div">
            <div class="d-flex justify-content-center align-items-center round-wise-details d-none">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="row">
                        <div class="col-md-3">
                            Credits Winning : 
                            <span id="credits-winning">0</span>
                        </div>
                        <% for(let acadSession of acadSessionsWiseCredits) {%>
                            <div class="session-credit-points col-md-3" data-acad-session-id="<%- acadSession.id %>">
                                Selected <%- acadSession.name %>  Credits :&nbsp;
                                <span class="credits-points">0</span>
                            </div>
                        <% } %> 
                        
                        <div class="col-md-3">Remaining Bid points: 
                            <span class="remaining-bid-points"><%- remaingBidPoints.student_bid_points %></span>
                        </div>
                        <div class="area-status col-md-3">Area Covered: 
                            <span class="area-status-span">0</span>
                            <img src="/image/student/body-part-image/bidding/area-cover.png" class="area-covered-image" alt="area-covered">
                        </div>
                        <% if(concentrationSet.primaryArea != 'NA') { %>
                        <div class="pri-area-status col-md-3">Credit Covered In Pri. Area: <span class="pri-area-span">0</span></div>
                        <% }  else { %>
                            <div class="pri-area-status col-md-3 d-none">Credit Covered In Pri. Area: <span class="pri-area-span">0</span></div>
                        <% } %>
                        <% if(concentrationSet.primaryArea  != 'NA') {
                            %>
                            <div class="primary-area-name col-md-3">
                                <span>Primary Area Name : <%- concentrationSet.primaryArea %></span>
                            </div>
                        <% } else { %>
                            <div class="primary-area-name col-md-3">
                                <span> Speciliazation Name : <%- concentrationSet.name %></span>
                            </div>
                        <% } %>    
                        <div class="time-status col-md-3"><h5 class="text-danger time-remaining"></h5></div>
                    </div>
                </div>
            </div>
        </div>    
    </div>
</footer>

<%- include('../partials/footer.ejs') %>
<script src="/socket.io/socket.io.js"></script>
<script>
    
$(document).ready(function() {

    $('.select2').select2();
    let socket = io();

    let roundDetails = JSON.parse(`<%- JSON.stringify(roundDetails) %>`);
    let isStudentPartOfRound = `<%- isStudentPartOfRound %>`;
    let currentRoundStatus = JSON.parse(`<%- JSON.stringify(currentRoundStatus) %>`);
    let concentrationSet = JSON.parse(`<%- JSON.stringify(concentrationSet) %>`);
    let creditsList = JSON.parse(`<%- JSON.stringify(acadSessionsWiseCredits) %>`)
    let considerationSet = JSON.parse(`<%- JSON.stringify(considerationSetList) %>`);
    let totalStudentBidPoints = `<%- studentBidsPoints.student_bid_points %>`
    
    $('#student-data').attr('data-isEligibleForRound', '<%= isStudentPartOfRound %>');
    $('#sidebar .side-menu li.' + `<%- active %>`).addClass('active');
    
    let userId = $('#student-data').data('user-id');
    let activeBidding = $('#student-data').data('active-bidding');
    let studentId = $('#student-data').data('student-id');

    let biddingSessionId = concentrationSet.biddingId;
    let totalBidPointBidByStudent = [];
    
    let biddingRow = ``;
    let withDrawBiddingRow = ``;
    let divisionBatchId ;
    let subjectAlreadySelected = false;
    let firstElementAfterWithdraw = false;
    let totalSelectedAreaCovered = 0;
    
    let studentBiddingStatus = {
        areaCovered:0,
        creditsPerArea: [],
        creditsPerSession: [],
        primaryArea: `${concentrationSet.name}`,
        totalCredit: 0,
        coursesId: [],
        divisionBatchId: [],
        winningCredits: 0,
        totalBidPoints: 0,
        winningBidPoints: 0,
    };

    let reasonForDisable = "You cannot withdraw winning course.";
    
    if (considerationSet.length) {
        totalSelectedAreaCovered = 0;
        considerationSet.forEach(concenSet => {
            
            studentBiddingStatus.divisionBatchId.push(concenSet.division_batch_lid);
            studentBiddingStatus.coursesId.push(concenSet.course_id);

            let sessionIndex = studentBiddingStatus.creditsPerSession.findIndex(ele => ele.acadSessionId === concenSet.sap_acad_session_id);
            if (sessionIndex !== -1) {
                studentBiddingStatus.creditsPerSession[sessionIndex].credits += concenSet.credits;
            } else {
                studentBiddingStatus.creditsPerSession.push({
                    acadSessionId: concenSet.sap_acad_session_id,
                    credits: concenSet.credits
                });
            }

            let isAreaExist  = studentBiddingStatus.creditsPerArea.findIndex(function(selectedArea) {
                return selectedArea.area === concenSet.area_name;
            });

            if (isAreaExist !== -1) {
                studentBiddingStatus.creditsPerArea[isAreaExist].credits += concenSet.credits;
            } else {
                studentBiddingStatus.creditsPerArea.push({
                    area: concenSet.area_name,
                    credits: concenSet.credits
                });
            }

            let primaryAreaCredits = studentBiddingStatus.creditsPerArea
                .filter(creditsAreaWise => {
                    return creditsAreaWise.area.toLowerCase() == concentrationSet.name.toLowerCase();
                })
                .map(creditsAreaWise => {
                    return creditsAreaWise.credits;
                });
                $('.student-footer .pri-area-status .pri-area-span').text(primaryAreaCredits)
            
            if(concenSet.is_winning){
                studentBiddingStatus.winningCredits +=  concenSet.credits;
            } 
             
        });

        $('#credits-winning').text(studentBiddingStatus.winningCredits);

        studentBiddingStatus.creditsPerSession.filter(creditsPerBidding =>{
            $(`.session-credit-points[data-acad-session-id="${creditsPerBidding.acadSessionId}"]`).
            find('.credits-points').text(creditsPerBidding.credits);
        })
        
        totalSelectedAreaCovered = studentBiddingStatus.creditsPerArea.filter(studentCreditsArea => {
            return studentCreditsArea.credits >= concentrationSet.minCreditsPerArea;
        })

        studentBiddingStatus.areaCovered = totalSelectedAreaCovered.length;
        $('.area-status .area-status-span').text(studentBiddingStatus.areaCovered);
    }

    considerationSetCourses(considerationSet);

    $('#bidding-acad-session').on('change', function(){

        let id = $(this).val();
        $("#bidding-table tbody tr").hide();
       

        if(id == 1){
            $("#bidding-table tbody tr").each(function(index) {
                $(this).find('.id-column').text(index + 1);
            
                if ((index) % 2 == 0) {
                    $(this).addClass('odd-row');
                    $(this).removeClass('even-row');
                }
                else if((index)% 2 == 1){
                    $(this).removeClass('odd-row');
                    $(this).addClass('even-row');
                }
            }).show();
        } else {
            $("#bidding-table tbody tr").filter(function () {
                let rowAcadSessionId = $(this).data('acad-session-id');
                return rowAcadSessionId == id;
            }).each(function(index) {
                $(this).find('.id-column').text(index + 1);
            
                if ((index) % 2 == 0) {
                    $(this).addClass('odd-row');
                    $(this).removeClass('even-row');
                }
                else if((index)% 2 == 1){
                    $(this).removeClass('odd-row');
                    $(this).addClass('even-row');
                }
            }).show();
        }
    }); 

    $('.round-wise-details').on('click', '#view-confirmed-course', function() {
        $('.confirmed-course-container .confirmed-course-content').removeClass('move-right');
        $('.confirmed-course-container').removeClass('d-none');
    });

    $('.confirmed-course-content').on('click', '.close-btn', function() {
        let confirmCourseContent = $(this).closest('.confirmed-course-content');
        confirmCourseContent.addClass('move-right');
        setTimeout(function() {
            confirmCourseContent.closest('.confirmed-course-container').addClass('d-none');
        }, 1000);
    });


    $('#area-change').on('change', function () {

        let acadSessionId = $('#acad-session-change').val();
        let areaId = $(this).val();
        let roundId = $('.round-basic-details .round-name').data('round-id');
        let studentId = $('#student-data').data('student-id');
        let selectedCourse = $("#course-filter :selected").val();
        let firstChildCourse = $("#course-filter :first-child").val();
        
        if (selectedCourse !== firstChildCourse) {
            $("#course-filter").val(firstChildCourse).trigger('change');
        }
    
        let ApiObj = {
            url: '/student/bidding/courses-by-area',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId,
                areaId: areaId,
                roundId: roundId,
                studentId: studentId
            },
            dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
    
            let courseName = `<option selected value="-1">--Select Area--</option>`;
            if (result.courseListDrop.length > 0) {
                result.courseListDrop.forEach(area => {
                    courseName += `<option value="${area.course_id}">${area.courseName}</option>`;
                });
            } else {
                courseName += `<option value="">No Area Found!</option>`;
            }
            $("#course-filter").html(courseName);
            $('#available-course-table tbody').html('');
            availableCourse(result.courseList);  
        })
    })

    $('#acad-session-change').on('change', function () {
        
        let acadSessionId = $(this).val();
        let roundId = $('.round-basic-details .round-name').data('round-id');
        let studentId = $('#student-data').data('student-id');
        let selectedCourse = $("#course-filter :selected").val();
        let selectedArea = $('#area-change :selected').val();
        let firstChildCourse = $("#course-filter :first-child").val();
        let firstChildArea = $("#area-change :first-child").val();

        if (selectedArea !== firstChildArea) {
            $('#area-change').val(firstChildArea).trigger('change');
        }
        if (selectedCourse !== firstChildCourse) {
            $("#course-filter").val(firstChildCourse).trigger('change');
        }

        let ApiObj = {
            url: '/student/bidding/courses-by-acad',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId,
                roundId: roundId, 
                studentId: studentId
            },
            dataType: 'JSON'
        };

        console.table([ acadSessionId, roundId,studentId]);
        ajaxApi(ApiObj).then(result => {
            let areaName = `<option selected value="-1">--Select Area--</option>`;
            if (result.areaList.length > 0) {
                result.areaList.forEach(area => {
                    areaName += `<option value="${area.id}">${area.areaName}</option>`;
                });
            } else {
                areaName += `<option value="">No Area Found!</option>`;
            }

            $("#area-change").html(areaName);

            $('#available-course-table tbody').html('');
            availableCourse(result.courseList);    
        });
    });
    
    $('#course-filter').on('change', function () {

        let acadSessionId = $('#acad-session-change').val();
        let areaId = $('#area-change').val();
        let roundId = $('.round-basic-details .round-name').data('round-id');
        let studentId = $('#student-data').data('student-id');
        let courseId = $(this).val();

        let ApiObj = {
            url: '/student/bidding/available-coures-by-courseId',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId,
                areaId: areaId,
                roundId: roundId,
                studentId: studentId,
                courseId: courseId
            },
            dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
            let courseName = `<option selected value="-1">--Select Area--</option>`;
            $('#available-course-table tbody').html('');
            availableCourse(result.courseList);  
        })
    })

    $('#available-course-table').on('click','.add-bidding',function() {
        
        biddingRow = ``;

        let areaName = $(this).closest('tr').data('area-name');
        let courseName = $(this).closest('tr').data('course-name');
        let credits = $(this).closest('tr').data('credits');
        let maxSeats = $(this).closest('tr').data('max-seats');
        let acadSession = $(this).closest('tr').data('acad-session');
        let divisionBatchId = $(this).closest('tr').data('division-batch-lid');
        let facultyId = $(this).closest('tr').data('faculty-id');
        let facultName = $(this).closest('tr').data('faculty-name');
        let acadSessionId = $(this).closest('tr').data('acad-session-id');
        let courseTime = $(this).closest('tr').children('.course-timing').html();
        let courseId = $(this).closest('tr').data('course-id');
        let courseLid = $(this).closest('tr').data('course-lid');
        let division = $(this).closest('tr').data('division');
        let isFavourite = $(this).closest('tr').data('is-favourite');
        let tableId = $('#bidding-table tbody tr').length;
        let studentId = $('#student-data').data('student-id');
        let facultyDateTime = $(this).closest('tr').data('faculty-date-time');
        let id = $(this).closest('tr').data('id');
        let roundId = $('.round-basic-details h4.round-name').data('round-id');

        biddingRow = `<tr 
                        data-id= "${id}" 
                        data-round-id ="${roundId}" 
                        data-area-name ="${areaName}" 
                        data-course-name ="${courseName}" 
                        data-acad-session ="${acadSession}" 
                        data-division-batch-lid ="${divisionBatchId}" 
                        data-faculty-id =${facultyId}
                        data-credits = "${credits}" 
                        data-max-seats ="${maxSeats}"
                        data-course-time ="${courseTime}" 
                        data-acad-session-id = "${acadSessionId}" 
                        data-course-id ="${courseId}" 
                        data-course-lid="${courseLid}"
                        data-division = "${division}"
                        data-faculty-name = "${facultName}"
                        data-is-favourite ="${isFavourite}"
                        data-faculty-date-time = "${facultyDateTime}"
                        >
                            <td class="id-column">${++tableId}</td>
                            <td>${areaName}</td>
                            <td>${courseName}-${division}</td>
                            <td>${acadSession}</td>
                            <td>${credits}</td>
                            <td class="available-count">0</td>
                            <td class="total-bidder-counts">0</td>
                            <td class="mrb-points"></td>
                            <td class="winning-status winning">Yes</td>
                            <td class="student-previous-bid-point">0</td>
                            <td class="d-flex">
                                <input type="text" placeholder="Bids" class="p-2 student-current-bid-point" size='15' autocomplete="off">
                                    <button class="btn border border-dark ms-2 add-bidding-points">
                                        <img src='/image/student/body-part-image/bidding-round-image/check-mark.png' alt='checkmark'>
                                    </button> 
                            </td>
                            <td>
                                <button class="btn border border-danger withdraw-bidding mt-1">
                                    <img src='/image/student/body-part-image/bidding-round-image/withdraw.png'>
                                </button>
                            </td>
                        </tr>`;
            
            socket.emit('createOrJoinRoom',{ 
                slugName: "<%- slug %>",
                studentLid: studentId,
                round_lid: roundId,
                courseLid: courseLid,
                concentration_lid: concentrationSet.concentraionId,
                divisionBatchLid: divisionBatchId,
                userId: userId,
                biddingSessionId: biddingSessionId
            });   
    })

    socket.on('roomWiseMessageBoardCast', function(roomWiseDetails){
        
        let divisionBatchId = roomWiseDetails.divisionBatchLid;
        let targetRow = $(`#bidding-table tr[data-division-batch-lid="${divisionBatchId}"]`);
        let winningStatusElement = targetRow.find('.winning-status');
        let credits = targetRow.data('credits');

        targetRow.find('.total-bidder-counts').text(roomWiseDetails.totalBidders);
        targetRow.find('.mrb-points').text(roomWiseDetails.mrb);
    });

    socket.on('roomWiseMessage', function(roomWiseDetails){
    
        let looserId = roomWiseDetails.looserId;
        let divisionBatchId = roomWiseDetails.divisionBatchLid;
        let targetRow = $(`#bidding-table tr[data-division-batch-lid="${divisionBatchId}"]`);
        let winningStatusElement = targetRow.find('.winning-status');
        let credits = targetRow.data('credits');

        targetRow.find('.total-bidder-counts').text(roomWiseDetails.totalBidders);
        targetRow.find('.mrb-points').text(roomWiseDetails.mrb);

        if(userId == looserId) {
            winningStatusElement.html('No');  
            winningStatusElement.removeClass('winning').addClass('losing');
            targetRow.find('.withdraw-bidding').removeClass('custom-disabled');
            targetRow.find('.withdraw-bidding').removeAttr('title');
            studentBiddingStatus.winningCredits -= credits;
            $('#credits-winning').text(studentBiddingStatus.winningCredits);
        }
    });

    socket.on('withdrawBiddingStatus', function(withdrawBiddingDetails){
        
        let winnerId = withdrawBiddingDetails.winnerId;
        let divisionBatchId = withdrawBiddingDetails.divisionBatchLid;
        let targetRow = $(`#bidding-table tr[data-division-batch-lid="${divisionBatchId}"]`);
        let winningStatusElement = targetRow.find('.winning-status');
        let credits = targetRow.data('credits');

        targetRow.find('.total-bidder-counts').text(withdrawBiddingDetails.totalBidders);
        targetRow.find('.mrb-points').text(withdrawBiddingDetails.mrb);

        if(userId == winnerId) {
            winningStatusElement.html('Yes');  
            winningStatusElement.addClass('winning').removeClass('losing');
            targetRow.attr('data-bidding-status', true);
            targetRow.find('.withdraw-bidding').attr('title');
            studentBiddingStatus.winningCredits += credits;
            $('#credits-winning').text(studentBiddingStatus.winningCredits);
        }
    });
    
    socket.on('addBiddingResponse', function(biddingResponseResult) {

        const message = biddingResponseResult.message;
        const biddingDetails = biddingResponseResult.biddingDetails;
        let divBatchAlreadySelected = false;
        let subjectAlreadySelected = false;

        const isErrorResponse = message.status === 0;
        const biddingResponseToUser = message.description;

        if (isErrorResponse) {
            createToast({ title: "Alert", msg: biddingResponseToUser, type: "negative", showingTime: "1000" });
        } else {
            const divisionBatchId = biddingDetails.div_batch_lid;
            const isSuccessResponse = message.status === 1;

            if (isSuccessResponse) {
            
                $('#bidding-table tbody').append(biddingRow);
                const biddingRowAdded = $(`#bidding-table tr[data-division-batch-lid="${divisionBatchId}"]`); 
                const courseId = biddingRowAdded.data('course-id');
                const acadSessionId = biddingRowAdded.data('acad-session-id');
                const credits = biddingRowAdded.data('credits');
                const areaName = biddingRowAdded.data('area-name');

                // Winning Course update in  student Bidding Status 
                if(biddingDetails.is_winning) {
                    studentBiddingStatus.winningCredits += credits;
                }
     
                // Credits Per Area upate in student Bidding Status
                let isAreaExist = studentBiddingStatus.creditsPerArea.findIndex(function(areaCredits) {
                    return areaCredits.area === areaName;
                });

                if (isAreaExist !== -1) {
                    studentBiddingStatus.creditsPerArea[isAreaExist].credits += credits;
                } else {
                    studentBiddingStatus.creditsPerArea.push({
                        area: areaName,
                        credits: credits
                    });
                }

                // Credits per trimester update in student Bidding status
                let isAcadSessionExist = studentBiddingStatus.creditsPerSession.findIndex(function(acadSessionCredits){
                    return acadSessionCredits.acadSessionId === acadSessionId
                })

                if (isAcadSessionExist !== -1) {
                    studentBiddingStatus.creditsPerSession[isAcadSessionExist].credits += credits;
                } else {
                    studentBiddingStatus.creditsPerSession.push({
                        acadSessionId: acadSessionId,
                        credits: credits
                    });
                }

                // area covered update in student bidding status
                let minCreditAreaFilter = studentBiddingStatus.creditsPerArea.filter(function(item) {
                    if(item.area == concentrationSet.primaryArea){
                        return  item.credits >= concentrationSet.minCreditsInPriArea
                    }
                    else{
                        return item.credits >= concentrationSet.minCreditsPerArea;
                    }
                });
              
                
                //update primary area Credits in student Bidding Status
                let primaryAreaCredits = 0;
                let primaryAreaMatch =  studentBiddingStatus.creditsPerArea.find(obj => {
                     if (obj.area == concentrationSet.primaryArea) {
                         primaryAreaCredits = obj.credits;
                         return true; 
                     } else {
                         return false; 
                     }
                 });

                if(primaryAreaMatch){
                     $('.student-footer .pri-area-status .pri-area-span').text(primaryAreaCredits)
                } 
                // push courseId in student bidding status
                studentBiddingStatus.coursesId.push(courseId);
                //push divisionBatch Id in student Bidding status
                studentBiddingStatus.divisionBatchId.push(divisionBatchId);
                studentBiddingStatus.areaCovered = minCreditAreaFilter.length;
                
                $(`#available-course-table tr[data-division-batch-lid="${divisionBatchId}"]`).remove();
               
               // updateTableForCurrentUser(biddingDetails);
               
                let actualAvailableSeats = biddingDetails.available_seats;
                let minimumRequireBits = biddingDetails.mrb;
                let totalBidders = biddingDetails.total_bidders;
                let isWinning = biddingDetails.is_winning; 
                
                let targetRow = $(`#bidding-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
                //let availableCourseRow = $(`#available-course-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
 
                if (targetRow.length > 0) {
                
                    let availableCountElement = targetRow.find('.available-count');
                    let mrbPointsElement = targetRow.find('.mrb-points');
                    let winningStatusElement = targetRow.find('.winning-status');
                    let totalBidder = targetRow.find('.total-bidder-counts');
                    //let totalBidderAvailableCourse = availableCourseRow.find('.total-bidder-counts');
                    //let mrbPointsAvailableCourse = availableCourse.find('.mrb-points');
                
                    targetRow.attr('data-id', biddingDetails.studentBiddingId);
                    targetRow.attr('data-round-lid', biddingDetails.round_lid);
                    targetRow.attr('data-bidding-status', isWinning);
                    availableCountElement.html(actualAvailableSeats);
                    totalBidder.html(totalBidders);
                    mrbPointsElement.html(minimumRequireBits);
                    //totalBidderAvailableCourse.html(totalBidders);
                    //mrbPointsAvailableCourse.html(minimumRequireBits);
                
                    if (isWinning) {  
                        winningStatusElement.html('Yes');
                        winningStatusElement.removeClass('losing').addClass('winning');
                    
                    } else {
                        winningStatusElement.html('No');
                        winningStatusElement.removeClass('winning').addClass('losing');
                        targetRow.find('.widthdraw-bidding').removeClass('custom-disabled');
                        targetRow.find('.withdraw-bidding').removeAttr('title'); 
                    }
                }

                $(`.session-credit-points[data-acad-session-id="${acadSessionId}"]`).find('.credits-points').text(studentBiddingStatus.creditsPerSession.find(obj => obj.acadSessionId == acadSessionId).credits);

                let totalRowNo  = Number($('#page-no').text());
                $('#page-no').text(--totalRowNo);
                createToast({ title: "Success", msg: biddingResponseToUser, type: "positive", showingTime: "1000" });
            } else {
                createToast({ title: "Alert", msg: biddingResponseToUser, type: "negative", showingTime: "1000" });
            }
        }
        
        $('#credits-winning').text(studentBiddingStatus.winningCredits);
        $('.area-status .area-status-span').text(studentBiddingStatus.areaCovered);
        $('#available-course-table tbody tr').each(function(index,element) {
            $(this).children(':first-child').text(index+1);
        });
    });
    

    $('#bidding-table').on('click', '.withdraw-bidding', function() {
        withDrawBiddingRow = ``;
        
        let concentrationId = $(this).closest('tr').data('id');
        let areaName = $(this).closest('tr').data('area-name');
        let courseName = $(this).closest('tr').data('course-name');
        let division = $(this).closest('tr').data('division');
        let divisionBatchId = $(this).closest('tr').data('division-batch-lid');
        let acadSessionId = $(this).closest('tr').data('acad-session-id');
        let acadSession = $(this).closest('tr').data('acad-session');
        let facultyId = $(this).closest('tr').data('faculty-id');
        let maxSeats = $(this).closest('tr').data('max-seats');
        let couresLid = $(this).closest('tr').data('course-lid'); 
        let credits = $(this).closest('tr').data('credits');
        let bidPoints = $(this).closest('tr').find('.student-previous-bid-point').html();
        let facultyName = $(this).closest('tr').data('faculty-name');
        let isFavourite = $(this).closest('tr').data('is-favourite');
        let totalBidPoints = Number($('.remaining-bid-points').html());
        let studentId = $('#student-data').data('student-id');
        let roundId = $('.round-basic-details h4.round-name').data('round-id');
        let courseId = $(this).closest('tr').data('course-id');
        let facultyDateTime = $(this).closest('tr').data('faculty-date-time');

        let selectedCourseCount = Number(studentBiddingStatus.divisionBatchId.length);
        withDrawBiddingRow = `<tr 
                                data-area-name = "${areaName}" 
                                data-course-name = "${courseName}"
                                data-division = "${division}" 
                                data-acad-session = "${acadSession}" 
                                data-division-batch-lid = "${divisionBatchId}"
                                data-faculty-id = "${facultyId}"
                                data-credits = "${credits}"
                                data-max-seats = "${maxSeats}"
                                data-acad-session-id = "${acadSessionId}"
                                data-course-id = "${courseId}"
                                data-course-lid = "${couresLid}"
                                data-faculty-name = "${facultyName}"
                                data-is-favourite ="${isFavourite}"
                                data-faculty-date-time = "${facultyDateTime}"
                            >

                            <td class="id-column">${selectedCourseCount}</td>
                            <td>${areaName}</td>
                            <td>${courseName}-${division}
                            ${isFavourite == 1 ?
                            '<img class="added-star fav-course" src="/image/student/body-part-image/available-course/added-star.png" alt="added">' : ''}
                            </td>
                            <td>${acadSession}</td>
                            <td class='course-timing'>${facultyDateTime}</td>
                            <td>${credits}</td>
                            <td>${maxSeats}</td>
                            <td>0</td>
                            <td>0</td>
                            <td>
                                <button class="btn border border-dark add-bidding">
                                    <i class="fa-solid fa-circle-plus" style="color:#5ca4ea"></i>
                                </button>
                            </td>
                        </tr>`

        socket.emit('withdrawBidding', { 
            slugName: "<%- slug %>",
            id: concentrationId,
            studentLid: studentId,
            round_lid: roundId,
            divisionBatchLid: divisionBatchId,
            userId: userId,
            biddingSessionId: biddingSessionId,
            isFavourite: isFavourite
        });
        
    });
    
    
    socket.on('withdrawBiddingResponse', function (withdrawResponse) {
    
        const divisionBatchId = withdrawResponse.divisionId;
        const isErrorResponse = withdrawResponse.message.status === 0;
        const withdrawResponseToUser = withdrawResponse.message.description;
        const withDrawBiddingRowIsFav = withdrawResponse.isFavourite;   
        const isSuccessResponse = withdrawResponse.message.status === 1;
        let availableCourseTable = $('#available-course-table tbody');
    
        if (isErrorResponse) {
            createToast({ title: "Alert", msg: withdrawResponseToUser, type: "negative", showingTime: "1000" });
        } else {
            const isSuccessResponse = withdrawResponse.message.status === 1;

            if (isSuccessResponse) {

                withdrawResponse.withdrawBiddingCourse.forEach(userSpecificWithdrawStatus => {
                    updateTableForCurrentUser(userSpecificWithdrawStatus);
                });
            
                withDrawBiddingRowIsFav == 1 ? availableCourseTable.prepend(withDrawBiddingRow):availableCourseTable.append(withDrawBiddingRow)

                $('#available-course-table tbody tr').each(function(index,element) {
                    $(this).children(':first-child').text(index+1);
                });

                let targetRow = $(`#bidding-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);

                let rowId = targetRow.find('td:first-child').text()
                let acadSessionId = targetRow.data('acad-session-id');
                let credits =  targetRow.data('credits');
                let courseId = targetRow.data('course-id');
                let area = targetRow.data('area-name');
                let biddingStatus = targetRow.data('bidding-status');
                

                // update winning Credits in student bidding status after withdraw
                if(biddingStatus){
                    studentBiddingStatus.winningCredits -= credits;
                }

                // update credits per session in student bidding status after withdraw.
                studentBiddingStatus.creditsPerSession.forEach((ele, idx) => {
                    if (ele.acadSessionId == acadSessionId) {
                        ele.credits -= credits;
                    }
                });
     
                let isAreaExist = studentBiddingStatus.creditsPerArea.findIndex(function(areaCredits) {
                    return areaCredits.area === area;
                });

                if (isAreaExist !== -1) {
                    firstElementAfterWithdraw = true;
                    studentBiddingStatus.creditsPerArea[isAreaExist].credits -= credits;
                    if(studentBiddingStatus.creditsPerArea[isAreaExist].credits == 0){
                        studentBiddingStatus.creditsPerArea.splice(isAreaExist, 1);
                    }
                }

                // update courseId in student bidding status after withdraw.
                studentBiddingStatus.coursesId = studentBiddingStatus.coursesId.filter(withdrawCourseId => withdrawCourseId != courseId)

                // update division batch Id in student bidding status after withdraw
                studentBiddingStatus.divisionBatchId = 
                studentBiddingStatus.divisionBatchId.filter(studentDivisionBatchId => studentDivisionBatchId != divisionBatchId);

                //update minimum credits area filter in student bidding status after withdraw

                let minCreditAreaFilter = studentBiddingStatus.creditsPerArea.filter(function(item) {
                    if(item.area === concentrationSet.primaryArea){
                        return  item.credits >= concentrationSet.minCreditsInPriArea
                    }
                    else{
                        return item.credits >= concentrationSet.minCreditsPerArea;
                    }
                    
                });
               
                //update primary area Credits in student Bidding Status
                let primaryAreaCredits = 0;
                let primaryAreaMatch =  studentBiddingStatus.creditsPerArea.find(obj => {
                   
                     if (area == concentrationSet.primaryArea) {
                        if(firstElementAfterWithdraw) {
                            primaryAreaCredits = obj.credits;
                        }else{
                            primaryAreaCredits -=  credits;
                        }
                         return true; 
                     } else {
                         return false; 
                     }
                 });

                if(primaryAreaMatch){
                     $('.student-footer .pri-area-status .pri-area-span').text(primaryAreaCredits)
                } 

                //update area compeleted in student bidding status after withdraw
                studentBiddingStatus.areaCovered = minCreditAreaFilter.length;


                let totalRowNo  = Number($('#page-no').text());
                $('#page-no').text(++totalRowNo);

                targetRow.remove();
                rearrangeIdAfterDeletion(rowId);
            
                let withdrawRow = $(`#available-course-table tbody tr[data-division-batch-lid="${divisionBatchId}"`);
        
                $('.area-status .area-status-span').text(studentBiddingStatus.areaCovered);
                $('#credits-winning').text(studentBiddingStatus.winningCredits);

                studentBiddingStatus.creditsPerSession.filter(obj => {
                    $(`.session-credit-points[data-acad-session-id="${obj.acadSessionId}"]`).find('.credits-points').html(obj.credits);
                });

                createToast({ title: "Success", msg: withdrawResponseToUser, type: "positive", showingTime: "1000" });
            }   
        }
    });


    $('#bidding-table').on('click', '.add-bidding-points', function () {

        let divisionBatchId = $(this).closest('tr').data('division-batch-lid');
        let bidPoints = $(this).closest('tr').find('.student-current-bid-point').val();
        let studentId = $('#student-data').data('student-id');
        let roundId = $('.round-basic-details h4.round-name').data('round-id');
        let previousBid = $(this).closest('tr').find('.student-previous-bid-point').html();
        let id = $(this).closest('tr').data('id');
        let totalBidPoints = Number($('#total-bid-points').html());
        let remainingBidPoints = Number($('.remaining-bid-points').html());
        let totalBidPointsByStudent = 0;

        let bidJson = {
            id: id,
            previous_bid : previousBid,
            bid_points: bidPoints
        }

        let bidPointsStudentBid = {
                divisionBatchId: divisionBatchId,
                bidPoints: bidPoints     
        }
     
        socket.emit('studentBidding', {
            slugName: "<%- slug %>",
            studentId: studentId,
            roundId: roundId,
            divBatchId: divisionBatchId,
            userId: userId,
            biddingSessionId: biddingSessionId,
            inputJson: JSON.stringify(bidJson)
        });

        
        
        if (totalBidPointBidByStudent.some(bidPointBidByStudent => bidPointBidByStudent.divisionBatchId === divisionBatchId)) {
                let bidPointBidByStudent = totalBidPointBidByStudent.find(bidPointBidByStudent => bidPointBidByStudent.divisionBatchId === divisionBatchId);
                bidPointBidByStudent.bidPoints = bidPoints;
            } else {
                totalBidPointBidByStudent.push(bidPointsStudentBid);
            }
        
        $.each(totalBidPointBidByStudent, function(index, bidPointBidByStudent) {
            totalBidPointsByStudent += Number(bidPointBidByStudent.bidPoints);
            $('.remaining-bid-points').html(Number(totalStudentBidPoints) - Number(totalBidPointsByStudent));
        });
    });

    socket.on('studentBiddingResponse', function(biddingReponseResult) {
    
        let biddingResponseToUser = biddingReponseResult.studentBiddingResponse.description;
        const isSuccessResponse = biddingReponseResult.studentBiddingResponse.status === 1;
        let divisionBatchId = biddingReponseResult.divisionId;
        let studentBidPoints = biddingReponseResult.studentBidPoint;
        let targetRow = $(`#bidding-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
        let totalBidPointsByStudent = 0;

        let bidPointsStudentBid = {
            divisionBatchId: divisionBatchId,
            bidPoints: studentBidPoints     
        }
        if (isSuccessResponse) {
        
            let credits = targetRow.data('credits');
        
            if (targetRow.length > 0) {

                let winningStatusElement = targetRow.find('.winning-status');
                
                winningStatusElement.html('Yes');
                winningStatusElement.removeClass('losing').addClass('winning');
                studentBiddingStatus.winningCredits += credits;
                targetRow.find('.student-previous-bid-point').html(studentBidPoints);
                targetRow.find('.student-current-bid-point').val('');
               
                if(studentBidPoints > 0){
                    targetRow.find('.withdraw-bidding').addClass('custom-disabled');
                    targetRow.find('.withdraw-bidding').attr('title', reasonForDisable);
                }
            }

            createToast({ title: "Success", msg: biddingResponseToUser, type: "positive", showingTime: "1000"});
        } else {
            targetRow.find('.student-current-bid-point').val('');
            createToast({ title: "Alert", msg: biddingResponseToUser, type: "negative", showingTime: "1000"});
        } 
        $('#credits-winning').text(studentBiddingStatus.winningCredits);
       
    }); 


    socket.emit('biddingPageLoadTime', { 
        slugName: "<%- slug %>",
        activeBidding:activeBidding,
        biddingTime: JSON.parse(`<%- JSON.stringify(roundDetails) %>`),
        studentId: studentId
    });

    let biddingCourseFlag = false;
    socket.on('remainingTime', data =>{
        
        isEligibleForRound = data.studentList;
        $('#current-date-time').text(data.currentDateTime);
        
        if(data.currentRoundStatus.length > 0){
            
            if(data.currentRoundStatus[0].round_not_started_yet == '1'){
    
                    if(data.roundDetails.length > 0){
                        
                        if(isEligibleForRound == 1){
                            
                            $('.round-message-container').addClass('d-none');
                            $('.round-basic-details').removeClass('d-none');
                            $('.round-basic-details').find('.round-name').text(data.roundDetails[0].roundName);
                            $('.round-basic-details').find('.round-name').attr('data-round-id', data.roundDetails[0].round_lid);
                            $('.round-basic-details').find('#start-time').text(data.roundDetails[0].startTime);
                            $('.round-basic-details').find('#end-time').text(data.roundDetails[0].endTime);
                        }else{

                            $('.round-message-container .round-name').text(data.roundDetails[0].roundName);
                            $('.round-message-container p').text('You are not eligible for this round');
                            $('.round-basic-details').addClass('d-none');
                        }
                    }   
            }
            else if(data.currentRoundStatus[0].round_started == '1'){
                
                if(isEligibleForRound == 1){
                    if(!biddingCourseFlag){
                        availableCourse( data.biddingCourses);
                    }
                    biddingCourseFlag = true;
                    $('.round-message-container').addClass('d-none');
                    $('.round-basic-details').removeClass('d-none');
                    $('.round-wise-details').removeClass('d-none');
                    $('.time-remaining').text(data.remainingTime);
                }else{
                    $('.round-message-container').removeClass('d-none');
                    $('.round-message-container .round-name').text(data.roundDetails[0].roundName);
                    $('.round-message-container p').text('You are not eligible for this round');
                    $('.round-basic-details').addClass('d-none');
                }
               
            }
            if(data.currentRoundStatus[0].round_ended == '1'){
                $('.round-message-container').removeClass('d-none');
                $('.round-basic-details').addClass('d-none');
                $('.round-wise-details').addClass('d-none');
                $('.round-message-container .round-name').text(data.roundDetails[0].roundName);
                $('.round-message-container p').text('This Round Has Ended!');
            }
        }else{
            $('.round-message-container').removeClass('d-none');
            $('.round-message-container p').text('Round Not Found!');
            $('.round-basic-details').addClass('d-none');
            $('.round-wise-details').addClass('d-none');
        }
    })

    socket.emit('biddingPageLoad', { 
        biddingTime: JSON.parse(`<%- JSON.stringify(roundSettingTime) %>`),
        slugName: "<%- slug %>",
        roundIId: 4,
        roundId: 2,
        studentId: studentId
    }); 

    function availableCourse(courses) {    
        
        let pageCount = 0;
        if(courses.length > 0) {

            courses.forEach(function(course, index) {
                
                let divisionBatchId = course.division_batch_lid;
                let facultyId = course.faculty_id;
                let existingElement = $(`#available-course-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
                let existingFaculty = existingElement.filter(`[data-faculty-id="${facultyId}"]`);
                let otherFacultyExists = existingElement.not(existingFaculty);
                let lengthOfTable = $('#available-course-table tbody tr').length;

                if (existingElement.length === 0) {
                    pageCount++;
                        let newRow = `<tr 
                                    data-area-name = "${course.area_name}" 
                                    data-course-name = "${course.course_name}"
                                    data-division = "${course.division}" 
                                    data-acad-session = "${course.acad_session}" 
                                    data-division-batch-lid = "${course.division_batch_lid}"
                                    data-faculty-id = "${course.faculty_id}"
                                    data-credits = "${course.credits}"
                                    data-max-seats = "${course.max_seats}"
                                    data-acad-session-id = "${course.sap_acad_session_id}"
                                    data-course-id = "${course.course_id}"
                                    data-course-lid = "${course.course_lid}"
                                    data-faculty-name = "${course.faculty_name}"
                                    data-is-favourite = "${course.is_favourite}"
                                    data-faculty-date-time="${course.day_name} (${course.StartTime} to ${course.EndTime}) ${course.faculty_name}"
                                >

                                <td class="id-column">${++lengthOfTable}</td>
                                <td>${course.area_name}</td>
                                <td>${course.course_name}-${course.division}
                                ${course.is_favourite == 1 ?
                                '<img class="added-star fav-course" src="/image/student/body-part-image/available-course/added-star.png" alt="added">' : ''}
                                </td>
                                <td>${course.acad_session}</td>
                                <td class='course-timing'>${course.day_name}(${course.StartTime} to ${course.EndTime}) ${course.faculty_name}</td>
                                <td>${course.credits}</td>
                                <td>${course.max_seats}</td>
                                <td class="total-bidder-counts">0</td>
                                <td class="mrb-points">0</td>
                                <td>
                                    <button class="btn border border-dark add-bidding">
                                        <i class="fa-solid fa-circle-plus" style="color:#5ca4ea"></i>
                                    </button>
                                </td>
                            </tr>`;
                            $('#available-course-table tbody').append(newRow);
                }else if(existingFaculty.length > 0){
                        return ;
                }
                else {
                    let courseTiming = `<div>${course.day_name}(${course.StartTime} to ${course.EndTime})`;
                    let contentToAppend = otherFacultyExists.length ? `${courseTiming} - ${course.faculty_name})` : `${courseTiming}`;
                        existingElement.children('.course-timing').append(contentToAppend);            
                }
                $('#page-no').html(pageCount);
            });
        }   
    }

    function rearrangeIdAfterDeletion(deleteColumnId) {
        $('#bidding-table tbody tr').each(function () {
            let columnId = Number($(this).children(':first-child').text());

            if (columnId > deleteColumnId) {
                $(this).children(':first-child').text(columnId - 1);
            }
        })
    }

    function considerationSetCourses(courses) {

        if(courses.length > 0 ){
            courses.forEach(function(course, index) {
                
                let divisionBatchId = course.division_batch_lid;
                let facultyId = course.faculty_id;
                let existingElement = $(`#bidding-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
                let existingFaculty = existingElement.filter(`[data-faculty-id="${facultyId}"]`);
                let otherFacultyExists = existingElement.not(existingFaculty);
                let lengthOfTable = $('#bidding-table tbody tr').length;
  
                if (existingElement.length === 0) {

                    let newRow = `<tr 
                                    data-area-name="${course.area_name}" 
                                    data-course-name="${course.course_name}"
                                    data-division="${course.course_name}-${course.division}" 
                                    data-acad-session="${course.acad_session}" 
                                    data-division-batch-lid="${course.division_batch_lid}"
                                    data-faculty-id="${course.faculty_id}"
                                    data-credits="${course.credits}"
                                    data-max-seats="${course.max_seats}"
                                    data-acad-session-id="${course.sap_acad_session_id}"
                                    data-course-id="${course.course_id}"
                                    data-course-lid="${course.course_lid}"
                                    data-faculty-name="${course.faculty_name}"
                                    data-id="${course.id}"
                                    data-round-id="${course.round_lid}"
                                    data-bidding-status= "${course.is_winning}"
                                   
                                >               
                                    <td class="id-column">${++lengthOfTable}</td>
                                    <td>${course.area_name}</td>
                                    <td>${course.course_name}-${course.division}
                                        ${course.is_favourite == 1 ?
                                        '<img class="added-star fav-course" src="/image/student/body-part-image/available-course/added-star.png" alt="added">' : ''}
                                    </td>
                                    <td>${course.acad_session}</td>
                                    <td>${course.credits}</td>
                                    <td>${course.max_seats}</td>
                                    <td>${course.total_bidders}</td>
                                    <td class="mrb-points">${course.min_req_bid}</td>
                                    <td class="winning-status ${course.is_winning ? 'winning' : 'losing'}">${course.is_winning ? 'Yes' : 'No'}</td>
                                    <td class="student-previous-bid-point">${course.bid_points}</td>
                                    <td class="d-flex"><input type="text" placeholder="Bids" class="p-2 student-current-bid-point" size='15' autocomplete="off">
                                        <button class="btn border border-dark ms-2 add-bidding-points">
                                            <img src='/image/student/body-part-image/bidding-round-image/check-mark.png' alt='checkmark'>
                                        </button>
                                    </td>
                                    <td>
                                        <button class="btn border border-danger withdraw-bidding">
                                            <img src='/image/student/body-part-image/bidding-round-image/withdraw.png'>
                                        </button>
                                    </td>
                                </tr>`;

                            $('#bidding-table tbody').append(newRow);

                            if (course.bid_points > 0 && course.is_winning == true) {
                                    let withdrawButton = $(`#bidding-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`).find('.withdraw-bidding');
                                    withdrawButton.addClass('custom-disabled');
                                    withdrawButton.attr('title', reasonForDisable);
                                }
                } else {
                        let courseTiming = `<div>${course.faculty_date_time}`;
                        let contentToAppend = otherFacultyExists.length ? `${courseTiming} - ${course.faculty_name})` : `${courseTiming}`;
                        existingElement.children('.course-timing').append(contentToAppend);
                    }
            });
        }       
    }

    function updateTableForCurrentUser(userSpecificWinningStatus) {
        
        let divisionBatchId = userSpecificWinningStatus.div_batch_lid;
        let actualAvailableSeats = userSpecificWinningStatus.available_seats;
        let minimumRequireBits = userSpecificWinningStatus.mrb;
        let totalBidders = userSpecificWinningStatus.total_bidders;
        let isWinning = userSpecificWinningStatus.is_winning;    
        
        let targetRow = $(`#bidding-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
    
        if (targetRow.length > 0) {
        
            let availableCountElement = targetRow.find('.available-count');
            let mrbPointsElement = targetRow.find('.mrb-points');
            let winningStatusElement = targetRow.find('.winning-status');
            let totalBidder = targetRow.find('.total-bidder-counts');
        
            targetRow.attr('data-id', userSpecificWinningStatus.studentBiddingId);
            targetRow.attr('data-round-lid', userSpecificWinningStatus.round_lid);
            availableCountElement.html(actualAvailableSeats);
            totalBidder.html(totalBidders);
            mrbPointsElement.html(minimumRequireBits);
        
            if (isWinning) {  
                winningStatusElement.html('Yes');
                winningStatusElement.removeClass('losing').addClass('winning');
            
            } else {
                winningStatusElement.html('No');
                winningStatusElement.removeClass('winning').addClass('losing');
                targetRow.find('.widthdraw-bidding').removeClass('custom-disabled');
                targetRow.find('.withdraw-bidding').removeAttr('title'); 
            }
        }
    }

    $(document).on('mouseenter', 'img.area-covered-image', function(){

        let completedCourses = studentBiddingStatus.creditsPerArea.filter(creditsPerArea => {
            if(creditsPerArea.area === concentrationSet.primaryArea){
                return  creditsPerArea.credits >= concentrationSet.minCreditsInPriArea
            }
            else{
                return creditsPerArea.credits >= concentrationSet.minCreditsPerArea;
            } 
        });

        let titleValue = '';
        completedCourses.forEach((completedCourse, index) => {
            titleValue += `${index + 1} : ${completedCourse.area}-${completedCourse.credits}<br>`;
        });

        $(this).tooltip({
            title: titleValue,
            placement: 'left', 
            trigger: 'manual', 
            html: true 
        }).tooltip('show');

        $('.tooltip div.tooltip-inner').css('min-width', '300px'); 
    }).on('mouseleave', 'img.area-covered-image', function() {
            $(this).tooltip('dispose');
    });
   
});    



</script>

