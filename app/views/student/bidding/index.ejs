<%- include('../partials/head') %>

<%- include('../partials/leftSidebarForStudent.ejs') %>
<%- include('../partials/header.ejs') %>
<div class="main-content">
  <div class="card card-custom-border-curv">
    <div class="card-header-custom d-flex justify-content-between p-1">
        <h3 class="ms-2"> Bidding</h3>  
    </div>
    <div class="card-body table-responsive">
                
      <div class="row ps-5 pe-5">
        <%for(let credit of creditList) { %>
            <div class="col-md-4">
                <h6><%- credit.acad_session %> Credits :&nbsp;<span class="credits-point-target" id="credits-points-target-<%- credit.sap_acad_session_id %>"><%- credit.min_credits %></span></h6>
            </div>
        <% } %>
    </div>

    <div class="row ps-5 pe-5">
            <%for(let acadSession of dropdownAcadSessionList) { %>
                <div class="col-md-4">
                    <h6><%- acadSession.acad_session %> Selected Credits :&nbsp;<span class="credit-points" id="credits-points-<%- acadSession.sap_acad_session_id %>">0</span></h6>
                </div>
            <% } %>
    </div>

    <div class="row ps-5 pe-5">
        <div class="col-md-4">
            <h6>Start Time :&nbsp;<span id="start-time"><%-startAndEndTime.startTime %></span></h6>
        </div>    
        <div class="col-md-4">
            <h6>End Time :&nbsp;<span id="end-time"><%-startAndEndTime.endTime %></h6>
        </div>
        <div class="col-md-4">
            <h6>Current Time : &nbsp;<span id="current-date-time"></span></h6>
        </div>
    </div>
    </div>
  </div>

  <div class="card card-custom-border-curv mt-5">
    <div class="card-header-custom d-flex justify-content-between p-1">
        <h3 class="ms-2">Confirmation Courses</h3>  
    </div>
    <div class="card-body table-responsive">
     
    </div>
  </div>
  <div class="card card-custom-border-curv mt-5">
    <div class="card-header-custom d-flex justify-content-between p-1">
        <h3 class="ms-2">Consideration Course</h3>  
    </div>
    <div class="col-md-3 mt-4 ms-5">
      <select class="form-select form-control select2 d-none" id="program-filter">
        <option value="" selected>Select Program</option>
        
      </select>
     </div>
    <div class="card-body table-responsive">
      <table class="table custom_row table-bordered mt-4 custom-table" id="consideration-table">
        <thead>
            <th>#</th>
            <th>Area</th>
            <th>Course</th>
            <th>Acad Session</th>
            <th>Credits</th>
            <th>Available Seats</th>
            <th>Total Bidders</th>
            <th>MRB</th>
            <th>Winning status</th>
            <th>Your Bid</th>
            <th>Change Bid</th>
            <th>Withdraw</th>
        </thead>
        <tbody>

        </tbody>
     </table>
    </div>
  </div>
  
  <div class="card card-custom-border-curv mt-5 bidding-modal" id="bidding-modal">
    <div class="card-header-custom d-flex justify-content-between p-1">
        <h3 class="ms-2">Available Courses</h3>
    </div>
 
    <div class="card-body table-responsive">
        <div class="d-flex">
          <% for(let acadSession of dropdownAcadSessionList) { %>
            <div class="col-sm-4 p-2">
              <button class="btn btn-light w-100 border bidding-trimester bidding-trimester-selected"  data-acad-session-id = "<%- acadSession.sap_acad_session_id %>">
                <%-acadSession.acad_session %>
              </button>
            </div>
          <% } %>
        </div> 
        
       <div class="row">
          <div class="col-md-3 mt-4 ms-2">
            <select class="form-select form-control select2 d-none" id="area-filter">
              <option value="" selected>Select Area</option>
              <% for(let area of areaList) { %>
                <option value="<%-area.area_name %>" ><%-area.area_name %></option>
              <% } %>
            </select>
         </div>
          <div class="col-md-3 mt-4 ms-2">
              <select class="form-select form-control select2 d-none" id="course-filter">
                <option value="" selected>Select Course</option>
                <% for(let biddingCourse of courseList) { %>
                  <option value="<%-biddingCourse.course_id %>" ><%-biddingCourse.course_name %></option>
                <% } %>
              </select>
          </div>
        </div>
        
        <table class="table custom_row table-bordered mt-4 custom-table" id="bidding-trimester-select-table">
            <thead>
                <th>#</th>
                <th>Area</th>
                <th>Course</th>
                <th>Trimester</th>
                <th>Course Timings</th>
                <th>Credits</th>
                <th>Available Seats</th>
                <th>Total Bidders</th>
                <th>MRB</th>
                <th>Action</th>
            </thead>
            <tbody>     
         </table>
  </div>
</div>

<div class="pop-up-message d-none">
  <div class="d-flex justify-content-between align-items-center">
    <img src="/image/student/leftSideBar/confirmation.jpg" alt="Confirmation Image" class="pop-up-img">
    <div class="pop-up-content">
      <b>Success</b>
      <p></p>
    </div>
  </div>
</div>

<div class="pop-up-message-error d-none">
  <div class="d-flex justify-content-between align-items-center">
    <div class="pop-up-content">
      <b class="text-danger">Error</b>
      <p>Exceeds trimester credits limit</p>
    </div>
  </div>
</div>

<%- include('../partials/footer.ejs') %>
<script>
$(document).ready(function() {
    $('.select2').select2({
    dropdownParent: $('#bidding-modal')
   });
  
    let biddingDetails = [];
    let areaCount = 0;
    let areaDetails = 0;
    let concentrationSettingJson = `<%-JSON.stringify(concentrationSetting) %>`;
    let concentrationSettingData = JSON.parse(concentrationSettingJson);
    let minCreditsCompleteArea = [];
    let primaryAreaDetails = [];

    let active = `<%- active %>`;
    $('#sidebar .side-menu li.' + active).addClass('active');
    
    let biddingCourseListData = `<%- JSON.stringify(biddingCourseList) %>`;
    let biddingCourseList = JSON.parse(biddingCourseListData);
    let dropdownAcadSessionList = JSON.parse(`<%- JSON.stringify(dropdownAcadSessionList) %>`);
    const concentrationId = concentrationSettingData.concentration_lid;

    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);
   
    biddingCourses(biddingCourseList);

    $('.bidding-trimester').each((index, biddingTrimester) =>{
      $(biddingTrimester).css('--bidding-trimester-active', $(biddingTrimester).innerHeight() + 'px');
    })

    $('.bidding-modal').on('click', '.bidding-trimester', function() {
       resetBiddingTrimester('bidding-trimester-select-table', 'bidding-trimester-selected');
       selectBiddingTrimester($(this), 'bidding-trimester-selected', 'bidding-trimester-active');

       let acadSessionId = $(this).data('acad-session-id');
       
        let ApiObj = {
          type: 'POST',
          url: '/student/bidding/course-by-acadsession',
          data:{
            acadSessionId: acadSessionId
          },
          dataType :'JSON',
        }
        ajaxApi(ApiObj).then(result =>{
        
          let courseName = `<option  >Select Course</option>`;
              if (result.courseName.length > 0) {
                  result.courseName.forEach(element => {
                    courseName += `<option value="${element.course_id}">${element.course_name}</option>`;
                  });
              } else {
                courseName += `<option value="">No Course Found!</option>`;
              }

              $("#course-filter").html(courseName);
              biddingCourses(result.biddingCourseList);
          
        }).catch(error =>{
          showError(JSON.stringify(error.responseJSON))
        })
    });

   $('#course-filter').on('change', function() {
        let courseId = $(this).val();
        let acadSessionId = $('button.bidding-trimester-selected').data('acad-session-id');
       
        let ApiObj = {
             type: 'POST',
             url: '/student/bidding/course',
             data: {
                    courseId: courseId,
                    acadSessionId:acadSessionId 
              },
              dataType: 'JSON'
            };

          ajaxApi(ApiObj).then(result => {
            biddingCourses(result.biddingCourseList);
            }).catch(error => {
                    showError(JSON.stringify(error.responseJSON))
                });
      });
       
      $('#area-filter').on('change', function() {
        let areaName = $(this).val();
        let acadSessionId = $('button.bidding-trimester-selected').data('acad-session-id');
        acadSessionId = acadSessionId == undefined?'':acadSessionId;
       
        let ApiObj = {
             type: 'POST',
             url: '/student/bidding/course-by-area',
             data: {
                    areaName: areaName,
                    acadSessionId:acadSessionId 
              },
              dataType: 'JSON'
            };

          ajaxApi(ApiObj).then(result => {
            
            let courseName = `<option  >Select Course</option>`;
              if (result.courseName.length > 0) {
                  result.courseName.forEach(element => {
                    courseName += `<option value="${element.course_id}">${element.course_name}</option>`;
                  });
              } else {
                courseName += `<option value="">No Course Found!</option>`;
              }

              $("#course-filter").html(courseName);
            biddingCourses(result.biddingCourseList);
            }).catch(error => {
                    showError(JSON.stringify(error.responseJSON))
                });
      });

      $('#bidding-trimester-select-table').on('click','.add-bidding',function(){

          let areaName = $(this).closest('tr').data('area-name');
          let courseName = $(this).closest('tr').data('course-name');
          let credits = $(this).closest('tr').data('credits');
          let available = $(this).closest('tr').data('max-seats');
          let acadSession = $(this).closest('tr').data('acad-session');
          let divisionBatchId = $(this).closest('tr').data('division-batch-lid');
          let facultyId = $(this).closest('tr').data('faculty-id');
          let acadSessionId = $(this).closest('tr').data('acad-session-id');
          let courseTime = $(this).closest('tr').children('.course-timing').html();
          let courseId = $(this).closest('tr').data('course-id');
          let isTotalCreditsMet = true;
          let totalSelectedCredits = 0;
          
          let areaNameAndCredits = {
            areaName:areaName,
            credit:credits,
            id:courseId
          }
          
        

          let biddingTable = $('#consideration-table tbody');
          let tableId = $('#consideration-table tbody tr').length;

          let creditPoints = Number($(`#credits-points-${acadSessionId}`).text());
           let targetCreditPoints = Number($(`#credits-points-target-${acadSessionId}`).text());
    
           if (creditPoints === targetCreditPoints) {
              $('.pop-up-message-error').removeClass('d-none');
              setTimeout(() => {
                $('.pop-up-message-error').addClass('d-none');
              }, 500);
              return;
            }
   
          let biddingRow = `<tr data-area-name ="${areaName}" data-course-name ="${courseName}" data-acad-session ="${acadSession}" data-division-batch-lid ="${divisionBatchId}" data-faculty-id =${facultyId} data-credits = "${credits}" data-max-seats =${available} data-course-time ="${courseTime}" data-acad-session-id = "${acadSessionId}" data-course-id =${courseId}>
                        <td>${++tableId}</td>
                        <td>${areaName}</td>
                        <td>${courseName}</td>
                        <td>${acadSession}</td>
                        <td>${credits}</td>
                        <td>${available}</td>
                        <td>0</td>
                        <td>0</td>
                        <td class="winning-status">Yes</td>
                        <td></td>
                        <td class="d-flex"><input type="text" placeholder="Bids" class="p-2" size='15'>
                          <button class="btn border  border-dark ms-2">
                          <img src='/image/student/body-part-image/bidding-round-image/check-mark.png' alt='checkmark'>
                          </button> </td>
                        <td>
                          <button class="btn border border-danger cancel-bidding-course mt-1" data-area="${areaName}"><img src='/image/student/body-part-image/bidding-round-image/withdraw.png' </button></td></tr>`;

               biddingTable.append(biddingRow);

               $('.pop-up-message').removeClass('d-none');
               let message = `<b>Success</b><br><p>Successfully added ${courseName} to consideration set</p>`;
               $('.pop-up-message .pop-up-content').html(message);
               let contentHeight = $('.pop-up-message .pop-up-content').height();

                $('.pop-up-message').css({
                  'height': contentHeight + 20, 
                  'width': 'auto', 
                });
               
                setTimeout(() => {
                  $('.pop-up-message').addClass('d-none');
                }, 500);
        
                let creditsAcadSession = Number($(`#credits-points-${acadSessionId}`).text()) + Number(credits);
                $(`#credits-points-${acadSessionId}`).text(creditsAcadSession);

                $(this).closest('tr').remove();
                arrangeTableId('bidding-trimester-select-table');

                biddingDetails.push(areaNameAndCredits);
                areaDetails = calculateAreaFrequency(biddingDetails);

                for (let credit of dropdownAcadSessionList) { 
                    let targetCreditPoints = $(`#credits-points-target-${credit.sap_acad_session_id}`).text();
                    let creditPoints = $(`#credits-points-${credit.sap_acad_session_id}`).text();
                    
                    if (targetCreditPoints !== creditPoints) {
                        isTotalCreditsMet = false;
                        break; 
                    }
                }
                
                $('.credit-points').each((index, selectedCredit) => {
                      totalSelectedCredits += parseFloat($(selectedCredit).text()) || 0;
                });

              
                const areaCountLength = Object.keys(areaDetails).length;
               
                if (concentrationId === 5) {
                      if (
                          ((concentrationSettingData.min_credits_per_area <= areaDetails[areaName].totalCredits) &&
                          (areaDetails[areaName].totalCredits <= concentrationSettingData.max_credits_per_area)) &&
                          (areaCount <= areaCountLength)
                      ) {
                        
                        if (!minCreditsCompleteArea.includes(areaName)) {
                                areaCount++;
                            minCreditsCompleteArea.push(areaName);
                        }
                        if (minCreditsCompleteArea.includes(areaName)) {
                            const existingArea = primaryAreaDetails.find(area => area.areaName === areaName);
                            if (existingArea) {
                                creditExistingArea =  Number(existingArea.totalCredits)+Number(credits);
                                existingArea.frequency++;
                                existingArea.totalCredits = creditExistingArea;
                            } else {
                                primaryAreaDetails.push({ areaName: areaName, frequency: 1, totalCredits:credits });
                            }
                        }
                  
                      }
                      if (isTotalCreditsMet) {
                      if (areaCount >= concentrationSettingData.no_of_areas_to_cover && totalSelectedCredits === concentrationSettingData.total_elective_credits) {
                          console.log('criteria met');
                      } else {
                          const areaMessage = areaCount < concentrationSettingData.no_of_areas_to_cover ? 'No of area is mismatch' : '';
                          console.log('values of areaMessage', areaMessage);
                      }
                    }
                 }
              
                 if (concentrationId != 5) {
                      if (
                          ((concentrationSettingData.min_credits_per_area <= areaDetails[areaName].totalCredits) &&
                          (areaDetails[areaName].totalCredits <= concentrationSettingData.max_credits_per_area)) &&
                          (areaCount <= areaCountLength)
                      ) {
                       
                      
                        if (!minCreditsCompleteArea.includes(areaName)) {
                                areaCount++;
                            minCreditsCompleteArea.push(areaName);
                        }

                      
                        if (minCreditsCompleteArea.includes(areaName)) {
                            const existingArea = primaryAreaDetails.find(area => area.areaName === areaName);
                            if (existingArea) {
                                creditExistingArea =  Number(existingArea.totalCredits)+Number(credits);
                                existingArea.frequency++;
                                existingArea.totalCredits = creditExistingArea;
                            } else {
                                primaryAreaDetails.push({ areaName: areaName, frequency: 1, totalCredits:credits });
                            }
                        }
                        
                      }
                      if (isTotalCreditsMet) {
                        const area = primaryAreaDetails.find(element => {
                          return element.totalCredits >= concentrationSettingData.min_credits_in_primary_area && 
                                element.totalCredits <= concentrationSettingData.max_credits_per_area;
                      });
                      
                      if ((areaCount >= concentrationSettingData.no_of_areas_to_cover && totalSelectedCredits === concentrationSettingData.total_elective_credits) && area) {
                          console.log('criteria met');
                      } else {
                          const areaMessage = areaCount < concentrationSettingData.no_of_areas_to_cover ? 'No of area is mismatch' : '';
                          console.log('values of areaMessage', areaMessage);
                      }}
                 }  
        })
        
        $('#consideration-table').on('click', '.cancel-bidding-course', function(){
         
          let areaName = $(this).closest('tr').data('area-name');
          let courseName = $(this).closest('tr').data('course-name');
          let acadSession = $(this).closest('tr').data('acad-session');
          let divisionBatchId = $(this).closest('tr').data('division-batch-lid');
          let facultyId = $(this).closest('tr').data('faculty-id');
          let credits = $(this).closest('tr').data('credits');
          let maxSeats = $(this).closest('tr').data('max-seats');
          let tableBiddingCourse = $('#bidding-trimester-select-table tbody');
          let courseTime = $(this).closest('tr').data('course-time');
          let acadSessionId = $(this).closest('tr').data('acad-session-id')
          let courseId = $(this).closest('tr').data('course-id');
          let tableId =  $('#bidding-trimester-select-table tbody tr').length;
          
          let creditPoints = Number($(`#credits-points-${acadSessionId}`).text());
          let targetCreditPoints = Number($(`#credits-points-target-${acadSessionId}`).text());
                if(creditPoints != targetCreditPoints){
                  $('.pop-up-message-error').addClass('d-none');
                }

          let biddingRow = `<tr data-area-name ="${areaName}" data-course-name ="${courseName}" data-acad-session ="${acadSession}" data-division-batch-lid ="${divisionBatchId}" data-faculty-id =${facultyId} data-credits = "${credits}" data-max-seats =${maxSeats} data-course-id ="${courseId}">
                        <td>${++tableId}</td>
                        <td>${areaName}</td>
                        <td>${courseName}</td>
                        <td>${acadSession}</td>
                        <td>${courseTime}</td>
                        <td>${credits}</td>
                        <td>${maxSeats}</td>
                        <td>0</td>
                        <td>0</td>
                        <td>
                            <button class="btn border border-dark add-bidding">
                              <i class="fa-solid fa-circle-plus" style="color:#5ca4ea"></i>
                            </button>
                        </td>
                 </tr>`;       
                 tableBiddingCourse.append(biddingRow);
                
                 let creditsAcadSession = Number($(`#credits-points-${acadSessionId}`).text()) - Number(credits);
                 $(`#credits-points-${acadSessionId}`).text(creditsAcadSession);

                 $(this).closest('tr').remove(); 
                 arrangeTableId('consideration-table');
                
                 const existingArea = primaryAreaDetails.find(area => area.areaName === areaName);
                 minCreditsCompleteArea = minCreditsCompleteArea.filter(area => area !== areaName);
                 
                            if(existingArea){
                            if ((existingArea.totalCredits) > credits) {
                                creditExistingArea =  Number(existingArea.totalCredits)-Number(credits);
                                existingArea.frequency--;
                                existingArea.totalCredits = creditExistingArea;
                                if((existingArea.totalCredits < concentrationSettingData.min_credits_per_area) && (concentrationId == 5)){
                                areaCount--;
                                }
                            }
                            else{
                              const existingAreaIndex = primaryAreaDetails.findIndex(area => area.areaName === areaName);
                                if (existingAreaIndex !== -1) {
                                  if (concentrationId != 5) {
                                    areaCount--;
                                  }
                                    primaryAreaDetails.splice(existingAreaIndex, 1);
                                }
                            }
                          }
        })
});

function biddingCourses(biddingCourseList) {
  $('#bidding-trimester-select-table tbody').empty();

  biddingCourseList.forEach(function(biddingCourse, index) {

    let { division_batch_lid: divisionBatchId, faculty_id: facultyId } = biddingCourse;
    let existingElement = $(`#bidding-trimester-select-table tbody tr[data-division-batch-lid="${divisionBatchId}"]`);
    let existingFaculty = existingElement.filter(`[data-faculty-id="${facultyId}"]`);
    let otherFacultyExists = existingElement.not(existingFaculty);
    let lengthOfTable = $('#bidding-trimester-select-table tbody tr').length;

    if (existingElement.length === 0) {
      let newRow = `<tr 
         data-area-name = "${biddingCourse.area_name}" 
         data-course-name = "${biddingCourse.course_name}-${biddingCourse.division}" 
         data-acad-session = "${biddingCourse.acad_session}" 
         data-division-batch-lid = "${biddingCourse.division_batch_lid}"
         data-faculty-id = "${biddingCourse.faculty_id}"
         data-credits = "${biddingCourse.credits}"
         data-max-seats = "${biddingCourse.max_seats}"
         data-acad-session-id = "${biddingCourse.sap_acad_session_id}"
         data-course-id = "${biddingCourse.course_id}"
         >

          <td>${++lengthOfTable}</td>
          <td>${biddingCourse.area_name}</td>
          <td>${biddingCourse.course_name}-${biddingCourse.division}</td>
          <td>${biddingCourse.acad_session}</td>
          <td class='course-timing'>${biddingCourse.day_name}(${biddingCourse.StartTime} to ${biddingCourse.EndTime}) ${biddingCourse.faculty_name}</td>
          <td>${biddingCourse.credits}</td>
          <td>${biddingCourse.max_seats}</td>
          <td>0</td>
          <td>0</td>
          <td>
            <button class="btn border border-dark add-bidding">
              <i class="fa-solid fa-circle-plus" style="color:#5ca4ea"></i>
            </button>
          </td>
        </tr>`;
      $('#bidding-trimester-select-table tbody').append(newRow);
    } else {
      let courseTiming = `<div>${biddingCourse.day_name}(${biddingCourse.StartTime} to ${biddingCourse.EndTime})`;
      let contentToAppend = otherFacultyExists.length ? `${courseTiming} - ${biddingCourse.faculty_name})` : `${courseTiming}`;
      existingElement.children('.course-timing').append(contentToAppend);
    }
  });
}

</script>

<%- include('../partials/footerEnd.ejs') %>