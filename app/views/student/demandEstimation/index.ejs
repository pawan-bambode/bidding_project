<%- include('../partials/head') %>
<%- include('../partials/leftSidebarForStudent.ejs') %>
<%- include('../partials/header.ejs') %>

<div class="main-content">
   <div class="card card-custom-border-curv">
        <div class="card-header-custom d-flex justify-content-between p-1">
            <h4 class="ms-2">Demand Estimation Round</h4>
            <button class="btn btn-danger time-remaining me-5"></button> 
        </div>
        <div class="card-body table-responsive">
            <h3 class="text-center bidding-round" data-id="<%- roundLid %>">Demand Estimation Round</h3>
            <div class="row ps-5 pe-5 d-flex justify-content-between">
                <div class="col-md-4">
                    <h6>Minimum / Maximum Yearly Credits :&nbsp;<span id="yearly-credits"><%- totalCreditsCounts %></span></h6>
                </div>
                <div class="col-md-4">
                    <h6>Concentraion Name :&nbsp;<span class="d-none" id="concentration-name"><%- concentrationSettings.concentration_name %></span><span class="concentration-not-selected d-none">Select Concentration</span></h6>
                </div>
            </div>
           
            <div class="row ps-5 pe-5">
                <%for(let credit of creditList) { %>
                    <div class="col-md-4 credits-point-target">
                        <h6><%- credit.acad_session %> Credits :&nbsp;<span  id="credits-points-target-<%- credit.sap_acad_session_id %>"><%- credit.min_credits %></span></h6>
                    </div>
                <% } %>
            </div>

            <div class="row ps-5 pe-5">
                    <%for(let acadSession of dropdownAcadSessionList) { %>
                        <div class="col-md-4 credit-points">
                            <h6><%- acadSession.acad_session %> Selected Credits :&nbsp;<span id="credits-points-<%- acadSession.sap_acad_session_id %>">0</span></h6>
                        </div>
                    <% } %>
            </div>

            <div class="row ps-5 pe-5">
                <div class="col-md-4">
                    <h6>Start Time :&nbsp;<span id="start-time"><%-startAndEndTime.startTime %></span><span class="demand-estimation-not-created d-none">Demand Estimation Not Created Yet</span></h6>
                </div>    
                <div class="col-md-4">
                    <h6>End Time :&nbsp;<span id="end-time"><%-startAndEndTime.endTime %></span><span class="demand-estimation-not-created d-none">Demand Estimation Not Created Yet</span></h6>
                </div>
                <div class="col-md-4">
                    <h6>Current Time : &nbsp;<span id="current-date-time"></span></h6>
                </div>
            </div>
            
        </div>
    </div> 
  
    <div class="card card-custom-border-curv mt-5 pb-1">
        <div class="card-header-custom d-flex justify-content-between p-1">
            <h3 class="ms-2">Selected Courses</h3>
            <div class="me-3 d-flex demand-estimation-status">
                
                <button class="btn btn-danger me-3 selected-credits"><h6>Selected Course Credits :&nbsp;
                    <% if (selectCourse.length > 0) { %>
                        <span id="selected-course-credits"><%- concentrationSettings.total_elective_credits %></span></h6></button>
                     <% }  else {%>
                    <span id="selected-course-credits">0</span></h6></button>
                     <% } %>
                     <button class="btn btn-danger me-3 areas-count"><h6>No.of Areas to cover :&nbsp;<span id="areas-count"><%- concentrationSettings.no_of_areas_to_cover %></span></h6></button>
                <button class="btn btn-success me-3"><h6>Min Credits per Area :&nbsp;<span id="min-credits-per-area"><%- concentrationSettings.min_credits_per_area %></span></h6></button>
                <button class="btn btn-success me-3 max-credits-per-area"><h6>Max Credits per Area :&nbsp;<span id="max-credits-per-area">
                    <%- concentrationSettings.max_credits_per_area %>
                </span></h6></button>
                <%if(concentrationSettings.min_credits_in_primary_area > 0) { %>
                    <button class="btn btn-danger me-3 min-credits-in-primary-area"><h6>Min Credits in Primary Area :&nbsp;<span id="min-credits-in-primary-area">
                        <%- concentrationSettings.min_credits_in_primary_area %>
                    </span></h6></button>
                    <% }%>
                <button class="btn btn-danger me-3 criteria-status"><h6>Criteria Not Met</h6></button>
            </div>
        </div>
            <div class="card-body table-responsive">
                <table class="table custom_row table-bordered mt-4 custom-table" id="selected-course-table">
                  <thead>
                      <th>#</th>
                      <th>Area</th>
                      <th>Course</th>
                      <th>Acad Session</th>
                      <th>Credits</th>
                      <th class="hide-column-after-round-over">Action</th>
                  </thead>
                  <tbody>
                        <% let selectedCourseIndex = 1 %>
                        <% if (selectCourse.length > 0) { %>
                          <% for (let selectedCourse of selectCourse) { %>
                            <tr data-course-id = "<%- selectedCourse.id %>" data-area="<%-selectedCourse.area_name %>" data-course-name="<%- selectedCourse.course_name %>" data-acad-session="<%-selectedCourse.acad_session %>" data-credits="<%-selectedCourse.credits %>" data-acad-session-id="<%-selectedCourse.sap_acad_session_id %>">

                              <td class="index-row-demand-estimation"><%- selectedCourseIndex++ %></td>
                              <td><%- selectedCourse.area_name %></td>
                              <td><%- selectedCourse.course_name %></td>
                              <td><%- selectedCourse.acad_session %></td>
                              <td><%- selectedCourse.credits %></td>
                              <td><button class="btn btn-danger cancel-course">Cancel</button></td>
                            </tr>
                          <% } %>
                        <% } %>                  
                  </tbody>
                </table>
            </div>
            <button class="btn btn-success save-select-course d-none w-50 m-auto mb-4">Save</button>
    </div>    

    <div class="card card-custom-border-curv mt-5 demand-estimation-modal">
      <div class="card-header-custom d-flex justify-content-between p-1">
          <h3 class="ms-2">Available Courses</h3>
      </div>
   
      <div class="card-body table-responsive">
          <div class="d-flex">
       
              <div class="col-md-3 ms-5">
                  <label class="form-label mb-1" for="acad-session-change">Select Acad Session:</label>
                  <select class="form-select form-control select2" id="acad-session-change">
                      <option selected disabled value="-1">--Select Acad Session-- </option>
                       <%for(let acadSession of dropdownAcadSessionList) { %>
                          <option value="<%- acadSession.sap_acad_session_id %>"><%- acadSession.acad_session %></option>
                      <% } %>    
                  </select>
               </div>   
                  <div class="col-md-3 ms-5">
                    <label class="form-label mb-1" for="area-change">Select Area:</label>
                  <select class="form-select form-control select2" id="area-change">
                    <option selected disabled value="-1">--Select Area-- </option>   
                </select>
              </div>
          </div>
          <div class="card-body table-responsive">
              <table class="table custom_row table-bordered mt-4 custom-table" id="available-course-table">
                <thead>
                    <th>#</th>
                    <th>Area</th>
                    <th>Course</th>
                    <th>Acad Session</th>
                    <th>Credits</th>
                    <th class="hide-column-after-round-over">Action</th>
                </thead>
                <tbody>
                    <% let count = 1 %>
                    <%for(let course of courseList) {%>
                        <tr data-course-id="<%- course.id %>" data-area="<%- course.area_name %>" data-course-name="<%-course.course_name %>" data-acad-session="<%-course.acad_session %>"
                            data-credits ="<%- course.credits %>" data-acad-session-id ="<%-course.sap_acad_session_id %>"
                            >
                            <td><%- count++ %></td>
                            <td><%-course.area_name %></td> 
                            <td><%-course.course_name %></td> 
                            <td><%-course.acad_session %></td> 
                            <td><%-course.credits %></td> 
                            <td><button class="btn btn-secondary add-course">Add</button></td>
                        </tr>
                    <%}%>
                </tbody>
              </table>
              <div class="d-flex justify-content-between">
                <div>
                    <p>Total entries :&nbsp;<span id="page-no"></span>
                    </p>
                </div>
                
            </div>
          </div>
      </div>     
</div>

<%- include('../partials/footer.ejs') %>
<script>
$(document).ready(function() {

    demandEstimationTimeCountDown();
    setInterval(demandEstimationTimeCountDown, 1000);
    setActiveMenuItem(`<%- active %>`);

    let concentrationSettings = JSON.parse('<%- JSON.stringify(concentrationSettings) %>');
    let minCreditsPerAreas = concentrationSettings.min_credits_per_area;
    let numOfAeaToCover = concentrationSettings.no_of_areas_to_cover;
    let maxCreditsPerAreas = concentrationSettings.max_credits_per_area;
    let totalCredits = concentrationSettings.total_elective_credits;
    let selectedCourse = JSON.parse('<%- JSON.stringify(selectCourse) %>');

    let creditsList = `<%- JSON.stringify(creditList) %>`;
    let parsedCreditsList = JSON.parse(creditsList);
    let comparingCredits = parsedCreditsList;
    let creditsObject = {};
    parsedCreditsList.forEach(item => {
        creditsObject[item.sap_acad_session_id] = item;
    });
    let areaAddedArray = [];
    let acadSessionArray = [];
    let areaCountFrequency = 0;
    let completedAreaCount = [];
    let completeAreaCountMore = [];
    let totalCreditsPoints = 0;
    let currentObject =  [];
    let completedArea;

    parsedCreditsList.forEach(item => {    
        let current = {
            acadSession: item.sap_acad_session_id,
            totalCredits: 0,
        }
        currentObject.push(current);
    });


    selectedCourse.forEach(obj => {
        totalCreditsPoints += Number(obj.credits);
    });

    if (selectedCourse.length > 0) {
        
        selectedCourse.forEach(course => {
            let CourseCredits = {
                area: course.area_name,
                credit: course.credits,
                id: course.id
            };

            let acadSesionsObject = {
                acadSessionId: course.sap_acad_session_id,
                acadSession: course.acad_session,
                credit: course.credits,
                id: course.id
            };

            areaAddedArray.push(CourseCredits);
            acadSessionArray.push(acadSesionsObject);
        });

        completedArea = calculateCompletedArea(areaAddedArray, minCreditsPerAreas);

        if ((completedArea.length) < numOfAeaToCover) {
            $('#areas-count').text(Number(numOfAeaToCover) - completedArea.length);
            $('.areas-count').addClass('btn-danger');
            $('.areas-count').removeClass('btn-success');
        } else if ((completedArea.length) >= numOfAeaToCover) {
            $('#areas-count').text(Number(0));
            $('.areas-count').removeClass('btn-danger');
            $('.areas-count').addClass('btn-success');
        }
    }

    if (totalCredits === totalCreditsPoints) {
        $('#available-course-table tbody tr').find('.add-course').addClass('disabled');
        $('.selected-credits').removeClass('btn-danger');
        $('.min-credits-in-primary-area').removeClass('btn-danger');
        $('.selected-credits').addClass('btn-success');
        $('.min-credits-in-primary-area').addClass('btn-success');
        parsedCreditsList.forEach(item => {
            $('#selected-course-table tbody').attr(`credit-complete-${item.sap_acad_session_id}`, true);
        });
    }

    let startTime = '<%- startAndEndTime %>'.trim();
    let timeRemaing = $('.time-remaining').text().trim();

    if (timeRemaing.trim() == 'Round Ended') {
        $('.hide-column-after-round-over').addClass('d-none');
    }

    if (startTime.trim() === '') {
        $('.demand-estimation-not-created').removeClass('d-none');
        $('.time-remaining').addClass('d-none');
    } else {
        $('.demand-estimation-not-created').addClass('d-none');
        $('.time-remaining').removeClass('d-none');
    }

    if (concentrationSettings == 0) {
        $('.concentration-not-selected').removeClass('d-none');
        $('#concentration-name').addClass('d-none');
    } else {
        $('.concentration-not-selected').addClass('d-none');
        $('#concentration-name').removeClass('d-none');
    }

    let acadSessionCount = '<%- dropdownAcadSessionList.length %>';
    let completedCreditsCount = 0;
    let selectedCourseList = ('<%- selectCourse.length %>');
    let count = 1;

    $('#available-course-table').on('click', '.add-course', function () {

        let courseId = $(this).closest('tr').data('course-id');
        let area = $(this).closest('tr').data('area');
        let course = $(this).closest('tr').data('course-name');
        let acadSession = $(this).closest('tr').data('acad-session');
        let credits = $(this).closest('tr').data('credits');
        let acadSessionId = $(this).closest('tr').data('acad-session-id');
        let selectedCourseCredit = $('#selected-course-credits').text();
        let maxCreditPerArea = $('#max-credits-per-area').text();
        let rowId = $(this).closest('tr').find('td:first-child').text();
        let selectedTableLenght = $('#selected-course-table tbody tr').length;
        count = selectedTableLenght + 1;
      
        

        let areaCountText = concentrationSettings.no_of_areas_to_cover;

        let CourseCredits = {
            area: area,
            credit: credits,
            id: courseId
        };
        let acadSesionsObject = {
            acadSessionId: acadSessionId,
            acadSession: acadSession,
            credit: credits,
            id: courseId
        };
        let areaObject = {
            area: area,
            credit: credits,
            id: courseId
        };

        $('#selected-course-credits').text(Number(selectedCourseCredit) + Number(credits));

        areaAddedArray.push(CourseCredits);
        acadSessionArray.push(acadSesionsObject);
        completedAreaCount.push(areaObject);


      

        let acadSEssionCount = acadSessionCounttyper(acadSessionArray);

        const acadSessionTotalsArray = calculateAcadSessionTotals(acadSEssionCount);
        acadSessionTotalsArray.filter(obj =>{
            currentObject.filter(current =>{ 
                if(current.acadSession == obj.acadSession){
                    current.totalCredits = obj.totalCredits;
                }
            }) 
        })

        $('.credit-points').each((index, element) => {
            currentObject.forEach(obj => {
                $(element).find(`#credits-points-${obj.acadSession}`).html(obj.totalCredits);
            });
        });

        if (acadSEssionCount[acadSessionId].totalCredits == creditsObject[acadSessionId].min_credits) {
            $('#available-course-table tbody tr').each((index, availableCourse) => {
                $(availableCourse).find('.add-course').addClass('disabled');
                $('#selected-course-table tbody').attr(`credit-complete-${acadSessionId}`, true);
            });
        }

        completedArea = calculateCompletedArea(areaAddedArray, minCreditsPerAreas);

        if (completedArea.length > 0) {
            completedArea.forEach((completedCourse) => {
               
                    if (Number($('#areas-count').text()) > 0) {
                        $('#areas-count').text(Number(areaCountText) - completedArea.length);
                        areaCountTextVariance = $('#areas-count').val();
                    }
                

                if (completedCourse.totalCredits === Number(maxCreditPerArea)) {
                    $(`#available-course-table tbody tr[data-area="${completedCourse.name}"]`).each((index, availableCourse) => {
                        $(availableCourse).find('.add-course').addClass('disabled');
                        $('#selected-course-table tbody').attr(`max-credits-one-area`, completedCourse.name);
                    });
                }
            });
        }

        let ajaxTable = `
                <tr data-course-id="${courseId}" data-area="${area}" data-course-name="${course}" data-acad-session="${acadSession}" data-credits="${credits}" data-acad-session-id="${acadSessionId}">
                    <td class="index-row-demand-estimation">${count++}</td>
                    <td>${area}</td>
                    <td>${course}</td>
                    <td>${acadSession}</td>
                    <td>${credits}</td>
                    <td><button class="btn btn-danger cancel-course">Cancel</button></td>
                </tr>
            `;

        $("#selected-course-table tbody").append(ajaxTable);
        $(this).closest('tr').remove();

        let concentrationName = $('#concentration-name').text();

        let minCreditPrimaryArea = $('#min-credits-in-primary-area').text();
        let selectedCredit = $('#selected-course-credits').text();
        let annualCredits = $('#yearly-credits').text();
        let areasCountCredit = $('#areas-count').text();

        if (selectedCredit == annualCredits) {
            $('.selected-credits').removeClass('btn-danger');
            $('.selected-credits').addClass('btn-success');
        } else {
            $('.selected-credits').addClass('btn-danger');
            $('.selected-credits').removeClass('btn-success');
        }

        if (Number($('#areas-count').text()) > 0) {
            $('.areas-count').addClass('btn-danger');
            $('.areas-count').removeClass('btn-success');
        } else {
            $('.areas-count').removeClass('btn-danger');
            $('.areas-count').addClass('btn-success');
        }

        if (concentrationName.toLocaleLowerCase() !== 'general management') {
            let primaryAreaCourse = calculateAreahighest(areaAddedArray);
        
            let concentrationCriteria = primaryAreaCourse.totalCredits;
     
            if (concentrationCriteria < minCreditPrimaryArea) {
                $('#selected-course-table tbody').removeAttr(`max-credits-one-area`);
                $('#min-credits-in-primary-area').closest('button').removeClass('btn-success');
                $('#min-credits-in-primary-area').closest('button').addClass('btn-danger');
            } else {
                $('#min-credits-in-primary-area').closest('button').removeClass('btn-danger');
                $('#min-credits-in-primary-area').closest('button').addClass('btn-success');
            }

            if ((selectedCredit == annualCredits) && (areasCountCredit == '0') && (concentrationCriteria >= minCreditPrimaryArea)  && (concentrationCriteria <= maxCreditsPerAreas) ) {
                $('.criteria-status').text('Criteria Met');
                $('.criteria-status').removeClass('btn-danger');
                $('.criteria-status').addClass('btn-success');
                $('.save-select-course').removeClass('d-none');
            }
        }

        if (concentrationName.toLocaleLowerCase() == 'general management') {
            if ((selectedCredit == annualCredits) && (areasCountCredit == '0')) {
                $('.criteria-status').text('Criteria Met');
                $('.criteria-status').removeClass('btn-danger');
                $('.criteria-status').addClass('btn-success');
                $('.save-select-course').removeClass('d-none');
            }
        }
    
    });

    $('#selected-course-table').on('click', '.cancel-course', function () {

        let acadSessionId = $(this).closest('tr').data('acad-session-id');
        let credits = $(this).closest('tr').data('credits');
        let area = $(this).closest('tr').data('area');
        let id = $(this).closest('tr').data('course-id');
        let acadSession = $(this).closest('tr').data('acad-session');
        let course = $(this).closest('tr').data('course-name');
        let rowId = $(this).closest('tr').find('td:first-child').text();
        let annualCredits = $('#yearly-credits').text();
        let minCreditPrimaryArea = $('#min-credits-in-primary-area').text();
        let selectedCourseCredit = $('#selected-course-credits').text();
       
        let areaObject = {
            area: area,
            credits: credits,
            id: id
        };

        areaAddedArray = areaAddedArray.filter(obj => obj.id != areaObject.id);
        selectedCourse = selectedCourse.filter(obj => obj.id != areaObject.id);
        acadSessionArray = acadSessionArray.filter(obj => obj.id != areaObject.id);
        acadSEssionCount = acadSessionCounttyper(acadSessionArray);

        const acadSessionTotalsArray = calculateAcadSessionTotals(acadSEssionCount);
        $('#selected-course-table tbody').attr(`credit-complete-${acadSessionId}`, false);

         completedArea = calculateCompletedArea(areaAddedArray, minCreditsPerAreas);

        acadSessionTotalsArray.filter(obj =>{ 
            
            currentObject.filter(current =>{ 
                const missingAcadSessions = currentObject.filter(obj => !acadSessionTotalsArray.some(current => current.acadSession === obj.acadSession))  
                if(current.acadSession == obj.acadSession){
                    current.totalCredits = obj.totalCredits;
                }
                missingAcadSessions.filter(obj =>{
                    if(current.acadSession === obj.acadSession){
                        current.totalCredits = 0;
                    }
                })    
            })    
        })
 
        if(acadSessionTotalsArray.length == 0){
            $('.credit-points').each((index, element) => {
            currentObject.forEach(obj => {
                $(element).find('span').html(obj.totalCredits);
            });
        });  
        }
        else{
        $('.credit-points').each((index, element) => {
            currentObject.forEach(obj => {
                $(element).find(`#credits-points-${obj.acadSession}`).html(obj.totalCredits);
            });
        });
        }

        if(completedArea.length <= numOfAeaToCover ){
        $('#areas-count').text(Number(numOfAeaToCover) - completedArea.length);
        }

        $('#selected-course-credits').text(Number(selectedCourseCredit) - Number(credits));
        selectedCourseCredit = $('#selected-course-credits').text();

        if ($('#selected-course-table tbody').attr(`credit-complete-${acadSessionId}`)) {
            $('#selected-course-table tbody').attr(`credit-complete-${acadSessionId}`, false);
            $(`#available-course-table tbody tr[data-acad-session=${acadSessionId}]`).each(function (index, elem) {
                $(elem).find('button.add-course').removeClass('disabled');
            });
        }

        let count = 1;
        let ajaxTable = `
                <tr data-course-id="${id}" data-area="${area}" data-course-name="${course}" data-acad-session="${acadSession}" data-credits="${credits}" data-acad-session-id="${acadSessionId}">
                    <td>${count++}</td>
                    <td>${area}</td>
                    <td>${course}</td>
                    <td>${acadSession}</td>
                    <td>${credits}</td>
                    <td><button class="btn btn-secondary add-course" data-area="${area}">Add</button></td>
                </tr>`;

        $("#available-course-table tbody").append(ajaxTable);

        $('.criteria-status').removeClass('btn-success');
        $('.criteria-status').addClass('btn-danger');
        $('.criteria-status').html('Criteria Not Met');
        $('.save-select-course').addClass('d-none');
        $(this).closest('tr').remove();
        
        if (selectedCourseCredit == annualCredits) {
            $('.selected-credits').removeClass('btn-danger');
            $('.selected-credits').addClass('btn-success');
        } else {
            $('.selected-credits').addClass('btn-danger');
            $('.selected-credits').removeClass('btn-success');
        }
        let primaryAreaCourse = calculateAreahighest(areaAddedArray);
        
        let concentrationCriteria = primaryAreaCourse.totalCredits;

        if ((completedArea.length) < numOfAeaToCover) {
            $('.areas-count').addClass('btn-danger');
            $('.areas-count').removeClass('btn-success');
        } else  {

            $('.areas-count').removeClass('btn-danger');
            $('.areas-count').addClass('btn-success');
        } 
       
      
       
        if (concentrationCriteria < minCreditPrimaryArea) {
            $('#min-credits-in-primary-area').closest('button').removeClass('btn-success');
            $('#min-credits-in-primary-area').closest('button').addClass('btn-danger');
        } else {
            $('#min-credits-in-primary-area').closest('button').removeClass('btn-danger');
            $('#min-credits-in-primary-area').closest('button').addClass('btn-success');
        }

        $('#acad-session-change').val('34').trigger('change');
        deleteSelectedCourse(rowId);
    });

    $('#acad-session-change').on('change', function () {
        let acadSessionId = $(this).val();

        let ApiObj = {
            url: '/student/demand-estimation/courses-by-acad',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId
            },
            dataType: 'JSON'
        }

        ajaxApi(ApiObj).then(result => {
            
            let areaName = `<option selected disabled value="-1">--Select Area--</option>`;
            if (result.areaList.length > 0) {
                result.areaList.forEach(area => {
                    areaName += `<option value="${area.area_name}">${area.area_name}</option>`;
                });

            } else {
                areaName += `<option value="">No Area Found!</option>`;
            }

            $("#area-change").html(areaName);
            ajaxTable(result.courseList);
            deleteSelectedCourse();
            $('#page-no').html(result.courseCount);
        });

    });

    $('#area-change').on('change', function () {
        let acadSessionId = $('#acad-session-change').val();
        let areaName = $(this).val();

        let ApiObj = {
            url: '/student/demand-estimation/courses-by-area',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId,
                areaName: areaName
            },
            dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
            
            ajaxTable(result.courseList);
            deleteSelectedCourse();
            $('#page-no').html(result.courseCount);
        })
    })

    function deleteSelectedCourse(deleteColumnId) {
        $('#selected-course-table tbody tr').each(function () {
            let columnId = Number($(this).children(':first-child').text());

            if (columnId > deleteColumnId) {
                $(this).children(':first-child').text(columnId - 1);
            }
        })
    }

    function EnableAcadSession(acadSessionId) {
        $('#selected-course-table tbody tr').each(function () {
            let currentAcadSessionId = $(this).data('acad-session-id');
            let targetCreditPoints = $(`#credits-points-target-${currentAcadSessionId}`).text();
            let creditPoints = $(`#credits-points-${currentAcadSessionId}`).text();
            if (targetCreditPoints != creditPoints) {
                let deleteAcadSession = $('#selected-course-table tbody').attr(`delete-acad-session-${currentAcadSessionId}`);
                if (deleteAcadSession == undefined) {
                    $('#selected-course-table tbody').attr(`delete-acad-session-${currentAcadSessionId}`, true);
                }
            }
        });
    }

    $(document).on('click', '.save-select-course', function () {
        let selectedCourseArray = [];
        $('#selected-course-table tbody tr').each((index, selectedCourse) => {
            let selectedCourses = {};
            let courseLid = $(selectedCourse).data('course-id');
            let studentLid = $('.student-id').text();

            selectedCourses.course_lid = courseLid;
            selectedCourseArray.push(selectedCourses);
        });

        let studentLid = $('#student-data').data('student-lid');
        let roundId = $('.bidding-round').data('id');
        if (roundId == 0) {
            createToastMessage('This round is not created yet!');
        } else {
            let ApiObj = {
                url: '/student/demand-estimation/save',
                type: 'POST',
                data: { inputJSON: JSON.stringify(selectedCourseArray), studentLid: studentLid, roundLid: roundId },
                dataType: 'JSON'
            };

            ajaxApi(ApiObj)
                .then(result => {
                    createToastMessage(result.description);
                })
                .catch(error => {
                    createToastError(JSON.stringify(error.responseJSON.description));
                });
        }
    });
});

    $('#selected-course-table tr[data-acad-session-id]').each(function() {
        const acadSessionId = $(this).data('acad-session-id');
        const element = $(`#credits-points-${acadSessionId}`);

        if (element.length) {
            const creditsValue = parseFloat($(this).data('credits'), 10);
            const elementValue = parseFloat(element.text(), 10) || 0;
            element.text(elementValue + creditsValue);
        }
    });

    function ajaxTable(courseList, completedAreaCount, concentrationSettings) {
        $("#available-course-table tbody").empty();
        let courseArray = [];
        let maxCreditsOneAreas = $('#selected-course-table tbody').attr('max-credits-one-area');
        let selectedCourse = $('#selected-course-table tbody tr').each((index, element) => {
            let courseId = $(element).data('course-id');
            courseArray.push(courseId);
        });
        courseArray.forEach(item => {
            courseList = courseList.filter(course => course.id !== item);
        });

        let ajaxTable = ``;
        if (courseList.length > 0) {
            let count = 1;
            for (const course of courseList) {
                let creditsComplete = $('#selected-course-table tbody').attr(`credit-complete-${course.sap_acad_session_id}`);
                let disabledAddButton = creditsComplete === 'true' ? 'disabled' : '';
                if (course.area_name == maxCreditsOneAreas) {
                    disabledAddButton = 'disabled';
                }
                ajaxTable +=
                    `<tr data-course-id="${course.id}" data-area="${course.area_name}" data-course-name="${course.course_name}" data-acad-session="${course.acad_session}" data-credits="${course.credits}" data-acad-session-id="${course.sap_acad_session_id}">
                        <td>${count++}</td>
                        <td>${course.area_name}</td>
                        <td>${course.course_name}</td>
                        <td>${course.acad_session}</td>
                        <td>${course.credits}</td>
                        <td><button class="btn btn-secondary add-course ${disabledAddButton}"  data-area="${course.area_name}" >Add</button></td>
                    </tr>`;
            }
        }
        $("#available-course-table tbody").html(ajaxTable);
    }

</script>

<%- include('../partials/footerEnd.ejs') %>