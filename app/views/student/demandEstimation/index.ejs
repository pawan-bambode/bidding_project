<%- include('../partials/head') %>

<style>
    .selected-course-container{
        max-height: 50vh;
        overflow-y: auto;
    }
</style>

<%- include('../partials/leftSidebarForStudent.ejs') %>
<%- include('../partials/header.ejs') %>



<div class="main-content">

    <div class="card card-custom-border-curv round-message-container d-none">
        <div class="round-message">
            <div class="card-header-custom d-flex justify-content-between">
                <h4 class="ms-2 round-name" data-round-id="1">
                   Demand Estimation Round
                </h4>    
            </div>
            <div class="card-body table-responsive d-flex justify-content-center align-items-center">
                <% if (currentRoundStatus.round_ended == 1) {  %>
                    <p class="round-status">This Round Has Ended!</p>
                <% } else if (currentRoundStatus.round_status == 'Round Not Found') { %>
                    <p class="round-status">Round Not Found!</p>
                <% } %>
                <p class="student-eligibility"></p>
            </div>
        </div>
    </div>

    <div class="round-basic-details<%= (currentRoundStatus.round_not_started_yet == 1) ? '' : ' d-none' %>">
        <ul class="d-flex round-wises justify-content-between align-items-end">
            <li class="ms-5 active" style="height: 58px;">
                <a class="text-decoration-none text-dark">
                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                        <div class="d-flex justify-content-between align-items-center active-div">
                            <h4 class="ms-2 round-name"><%- roundDetails.roundName %></h4>
                        </div>
                    </div>
                </a>
            </li>
        </ul>
   
        <div class="card card-custom-border-curv">
            <div class="card-header-custom d-flex justify-content-between p-1 align-items-center">
                <h4 class="my-0 mx-1">Demand Estimation Round</h4>
                <h5 class="time-remaining my-0 mx-1"></h5>
            </div>
             
            <div class="card-body table-responsive">
                
                <div class="row ps-5 pe-5">
                    <% for(let credit of creditList) { %>
                        <div class="col-md-4 credits-point-target">
                            <h6><%- credit.name %> Credits :&nbsp;
                                <span id="credits-points-target-<%- credit.id %>"><%- credit.credits %></span>
                            </h6>
                        </div>
                    <% } %>
                </div>
       
                <div class="row ps-5 pe-5">
                    <div class="col-md-4">
                        <h6>Start Time :&nbsp;
                            <span id="start-time"><%- roundDetails !== undefined ? roundDetails.startTime : '' %></span>
                            <span class="round-not-created d-none">Demand Estimation Not Created Yet</span>
                        </h6>
                    </div>
                    <div class="col-md-4">
                        <h6>End Time :&nbsp;
                            <span id="end-time"><%- roundDetails !== undefined ? roundDetails.endTime : '' %></span>
                            <span class="round-not-created d-none">Demand Estimation Not Created Yet</span>
                        </h6>
                    </div>
                    <div class="col-md-4">
                        <h6>Current Time : &nbsp;
                            <span id="current-date-time"></span>
                        </h6>
                    </div>
                </div>

                <div class="row ps-5 pe-5 d-flex justify-content-between">
                    <div class="col-md-4">
                        <h6>Minimum / Maximum Yearly Credits :&nbsp;
                            <span id="yearly-credits"><%- totalCreditsCounts %></span>
                        </h6>
                    </div>
                    <div class="col-md-4">
                        <h6>Concentration Name :&nbsp;
                            <span class="d-none" id="concentration-name"><%- concentrationSet.name %></span>
                            <span class="concentration-not-selected d-none">Select Concentration</span>
                        </h6>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="round-wise-details d-none">
        <div class="card card-custom-border-curv mt-5 pb-1">
            <div class="card-header-custom d-flex justify-content-between p-1">
                <h3 class="ms-2">Selected Courses</h3>
                <div class="me-3 d-flex align-items-center">
                    <div class="submission-status mx-4 p-2" style="border: 2px solid;">
                        <% if (selectCourse.length > 0) { %>
                            SUBMITTED <i class="fa-solid fa-circle-check"></i>
                        <% } %>
                        
                    </div>
                </div>
            </div>
            <div class="credit-status d-flex justify-content-around align-items-center flex-md-row flex-column mx-3 mt-2">
               
                <div class="flex-grow-1 text-center">
                    Areas To Cover:
                    <%- concentrationSet.areasCover %>
                </div>
                <div class="flex-grow-1 text-center">
                    Min. Credits in Primary Area:
                    <%-concentrationSet.minCreditsInPrimayArea %>
                </div>
                <div class="flex-grow-1 text-center">
                    Min. Credits Per Area:
                    <%- concentrationSet.minCreditsPerArea %>
                </div>
                <div class="flex-grow-1 text-center">
                    Max. Credits Per Area:
                <%- concentrationSet.maxCreditsPerArea %>
                </div>
            </div>
            <div class="card-body table-responsive selected-course-container">
                
                <table class="table table-bordered mt-4" id="selected-course-table">
                    <thead>
                        <th>#</th>
                        <th>Area</th>
                        <th>Course</th>
                        <th>Acad Session</th>
                        <th>Credits</th>
                        <th class="hide-column-after-round-over">Action</th>
                    </thead>
                    <tbody>
                        <% let selectedCourseIndex = 1 %>
                        <% if (selectCourse.length > 0) { %>
                            <% for (let selectedCourse of selectCourse) { %>
                                <tr data-course-id="<%- selectedCourse.id %>"
                                    data-area="<%-selectedCourse.area_name %>"
                                    data-course-name="<%- selectedCourse.course_name %>"
                                    data-acad-session="<%-selectedCourse.acad_session %>"
                                    data-credits="<%-selectedCourse.credits %>"
                                    data-acad-session-id="<%-selectedCourse.sap_acad_session_id %>">
                                
                                    <td class="index-row-demand-estimation"><%- selectedCourseIndex++ %></td>
                                    <td><%- selectedCourse.area_name %></td>
                                    <td><%- selectedCourse.course_name %></td>
                                    <td><%- selectedCourse.acad_session %></td>
                                    <td><%- selectedCourse.credits %></td>
                                    <td><button class="btn btn-danger cancel-course" title="remove"><i class="fa-solid fa-xmark"></i></button></td>
                                </tr>
                            <% } %>
                        <% } else{%>
                            <tr>
                                <td colspan="6" class="text-center"><h4>No Course Selected, Select Course From  Available Course</h4></td>
                            </tr>
                            <%}%>
                    </tbody>
                </table>
            </div>
            <button class="btn btn-success save-select-course w-50 m-auto my-3" disabled>Save</button>
        </div>
    
        <div class="card card-custom-border-curv mt-5">
            <div class="card-header-custom d-flex justify-content-between p-1">
                <h3 class="ms-2">Available Courses</h3>
            </div>
        
            <div class="card-body table-responsive">
                <div class="d-flex">
                    <div class="col-md-3 ms-5">
                        <label class="form-label mb-1" for="acad-session-change">Select Acad Session:</label>
                        <select class="form-select form-control select2" id="acad-session-change">
                            <option selected disabled value="-1">--Select Acad Session-- </option>
                                <%for(let acadSession of acadSessions) { %>
                                    <option value="<%- acadSession.id %>"><%- acadSession.name %></option>
                                <% } %>
                        </select>
                    </div>
                    <div class="col-md-3 ms-5">
                        <label class="form-label mb-1" for="area-change">Select Area:</label>
                        <select class="form-select form-control select2" id="area-change">
                            <option selected disabled value="-1">--Select Area-- </option>
                        </select>
                </div>
            </div>

            <div class="card-body table-responsive">
                <table class="table table-bordered mt-4" id="available-course-table">
                    <thead>
                        <th>#</th>
                        <th>Area</th>
                        <th>Course</th>
                        <th>Acad Session</th>
                        <th>Credits</th>
                        <th class="hide-column-after-round-over">Action</th>
                    </thead>
                    <tbody>
                        <% let count = 1 %>
                        <%for(let course of courseList) {%>
                            <tr data-course-id="<%- course.id %>"
                                data-area="<%- course.area_name %>" data-course-name="<%-course.course_name %>" data-acad-session="<%-course.acad_session %>" data-credits="<%- course.credits %>" data-acad-session-id="<%-course.sap_acad_session_id %>">

                                <td><%- count++ %></td>
                                <td><%-course.area_name %></td>
                                <td><%-course.course_name %></td>
                                <td><%-course.acad_session %></td>
                                <td><%-course.credits %></td>
                                <td><button class="btn btn-secondary add-course">Add</button></td>
                            </tr>
                        <%}%>
                    </tbody>
                </table>

                <div class="d-flex justify-content-between">
                    <div>
                        <p>Total entries :&nbsp;
                            <span id="page-no"></span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>    
</div>

</main>
<footer>
    <div class="student-footer text-center">
        <div class="student-footer-div">
            <div class="d-flex justify-content-center align-items-center round-wise-details d-none">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="row">

                        <div class="col-md-3">
                            Total Selected Credit:
                            <% if (selectCourse.length > 0) { %>
                            <span id="selected-course-credits"><%- concentrationSet.totalCredits %></span>
                            <% } else { %>
                            <span id="selected-course-credits">0</span>
                            <% } %>
                            </div>
                        <% for(let acadSession of acadSessions) {%>
                            <div class="session-credit-points col-md-3" data-acad-session-id="<%- acadSession.id %>">
                                Selected <%- acadSession.name %>  Credits :&nbsp;
                                <span class="credits-points">0</span>
                            </div>
                        <% } %> 
                        <div class="criteria-status col-md-3">CRITERIA NOT MET</div>
                        <div class="area-status col-md-3">Area Covered: <span class="area-status-span"></span></div>
                        <div class="time-status col-md-6"><h5 class="text-danger time-remaining"></h5></div>

                    </div>
                </div>
            </div>
        </div>    
    </div>
</footer>


<%- include('../partials/footer.ejs') %>

<script>
$(document).ready(function() {


    setActiveMenuItem(`<%- active %>`);

    let socket = io();
    let concentrationSet = JSON.parse('<%- JSON.stringify(concentrationSet) %>');

    let minCreditsPerAreas = concentrationSet.minCreditsPerArea;
    let numOfAeaToCover = concentrationSet.areasCover;
    let maxCreditsPerAreas = concentrationSet.maxCreditsPerArea;
    let totalCredits = concentrationSet.totalCredits;
    let activeBidding = $('#student-data').data('active-bidding');

    let selectedCourse = JSON.parse('<%- JSON.stringify(selectCourse) %>');
    let credits = `<%- JSON.stringify(creditList) %>`;  
    let parsedCredits = JSON.parse(credits);
    let comparingCredits = parsedCredits;
    let creditsObject = {};
        parsedCredits.forEach(item => {
            creditsObject[item.id] = item;
        });
    let areaAdd = [];
    let acadSessions = [];
    let completedAreas = [];
    let totalCreditPoints = 0;
    let currentSelCredits =  [];
    let completedArea;

    let roundDetails = JSON.parse(`<%- JSON.stringify(roundDetails) %>`);
    let isStudentPartOfRound = `<%- isStudentPartOfRound %>`
    let currentRoundStatus = (`<%- currentRoundStatus %>`);
    let studentId = $('#student-data').data('student-id');

    socket.emit('demandEstimationLoadTime', { 
        slugName: "<%- slug %>",
        activeBidding:activeBidding,
        biddingTime: JSON.parse(`<%- JSON.stringify(roundDetails) %>`),
        studentId: studentId
    });

    let biddingCourseFlag = false;
    socket.on('remainingTimeForDemandEstimation', data =>{
        
        isEligibleForRound = data.studentList;
        $('#current-date-time').text(data.currentDateTime);
        
        if(data.currentRoundStatus.length > 0){
            
            if(data.currentRoundStatus[0].round_not_started_yet == '1'){
    
                    if(data.roundDetails){
                        
                        if(isEligibleForRound == 1){
                            
                            $('.round-message-container').addClass('d-none');
                            $('.round-basic-details').removeClass('d-none');
                            $('.round-basic-details').find('.round-name').text(data.roundDetails[0].roundName);
                            $('.round-basic-details').find('.round-name').attr('data-round-id', data.roundDetails[0].round_lid);
                            $('.round-basic-details').find('#start-time').text(data.roundDetails[0].startTime);
                            $('.round-basic-details').find('#end-time').text(data.roundDetails[0].endTime);
                        }else{
                            $('.round-message-container').removeClass('d-none');
                            $('.round-message-container .round-name').text(data.roundDetails[0].roundName);
                            $('.round-message-container .student-eligibility').text('You are not eligible for this round');
                            $('.round-basic-details').addClass('d-none');
                        }
                    }   
            }
            else if(data.currentRoundStatus[0].round_started == '1'){

                if(isEligibleForRound == 1){
                    if(!biddingCourseFlag){
                        availableCourse( data.biddingCourses);
                    }
                    biddingCourseFlag = true;
                    $('.round-message-container').addClass('d-none');
                    $('.round-basic-details').removeClass('d-none');
                    $('.round-wise-details').removeClass('d-none');
                    $('.time-remaining').text(data.remainingTime);
                }else{

                    $('.round-message-container').removeClass('d-none');
                    $('.round-message-container .round-name').text(data.roundDetails[0].roundName);
                    $('.round-message-container .student-eligibility').text('You are not eligible for this round');
                    $('.round-basic-details').addClass('d-none');
                }
               
            }
            else if(data.currentRoundStatus[0].round_ended == '1'){
                $('.round-message-container').removeClass('d-none');
                $('.round-basic-details').addClass('d-none');
                $('.round-wise-details').addClass('d-none');
                $('.round-message-container .card-body').html('<p>Round Has Ended!</p>');
            }
        }else{
            $('.round-message-container').removeClass('d-none');
            $('.round-message-container .round-status').html('Round Not Found!');
            $('.round-basic-details').addClass('d-none');
            $('.round-wise-details').addClass('d-none');
        }
    })

    socket.emit('roundEnded', {
         slugName: "<%- slug %>",
         startTime :  JSON.parse(`<%- JSON.stringify(startAndEndTime) %>`)
    });  

    socket.on('roundEndResponse', function(demandEstimationResponse) {
        let isStudentParticipatInRound = $('#student-data').data('isstudentpartofround');
        if(isStudentParticipatInRound){
            $('.round-wise-modal').addClass('d-none');
            $('.round-message-container').removeClass('d-none');
            $('.round-message-container .round-status').text('This This Round has Ended');
        }
    });

    socket.emit('demandEstimationPageLoad', {
              slugName: "<%- slug %>",
              biddingTime: JSON.parse(`<%- JSON.stringify(startAndEndTime) %>`),
              roundId: 1,
              studentId: studentId      
    });  

    socket.on('demandEsmationVisibleToStudent', function(data){

        if(isStudentPartOfRound == '1'){
            let roundName = data.roundDetails[0].roundName.replaceAll('_', ' ');
            let roundId = data.roundDetails[0].round_lid;
            let roundStartTime = data.roundDetails[0].startTime;
            let roundEndTime = data.roundDetails[0].endTime;
            
            $('.round-wise-modal').removeClass('d-none')
            
            $('#start-time').html(roundStartTime);
            $('#end-time').html(roundEndTime);
            $('.round-name').html(roundName);
            $('.round-name').attr('data-round-id', roundId);
            $('.bidding-round-wise').removeClass('d-none');
            $('.round-message-container').addClass('d-none');
        }
        
   })

    parsedCredits.forEach(item => {  
        let current = {
            acadSession: item.id,
            totalCredits: 0,
        }
        currentSelCredits.push(current);
    });

    selectedCourse.forEach(obj => {
        totalCreditPoints += Number(obj.credits);
    });

    if(totalCreditPoints == totalCredits){
        $('.student-footer .criteria-status').html('CRITERIA MET');
        $('.student-footer .criteria-status').addClass('btn-success');
        $('.student-footer .criteria-status').removeClass('btn-danger');
    }
    if (selectedCourse.length > 0) {
       
        selectedCourse.forEach(course => {
            let CourseCredits = {
                area: course.area_name,
                credit: course.credits,
                id: course.id
            };

            let acadSesionsObject = {
                acadSessionId: course.sap_acad_session_id,
                acadSession: course.acad_session,
                credit: course.credits,
                id: course.id
            };

            areaAdd.push(CourseCredits);
            acadSessions.push(acadSesionsObject);
        });

        completedArea = calculateCompletedArea(areaAdd, minCreditsPerAreas);

        if ((completedArea.length) < numOfAeaToCover) {
            $('#areas-count').text(Number(numOfAeaToCover) - completedArea.length);
            $('.areas-count').addClass('btn-danger');
            $('.areas-count').removeClass('btn-success');
        } else if ((completedArea.length) >= numOfAeaToCover) {
            $('#areas-count').text(Number(0));
            $('.areas-count').removeClass('btn-danger');
            $('.areas-count').addClass('btn-success');
        }
    }

    if (totalCredits === totalCreditPoints) {
        $('#available-course-table tbody tr').find('.add-course').addClass('disabled');
        $('.selected-credits').removeClass('btn-danger');
        $('.min-credits-in-primary-area').removeClass('btn-danger');
        $('.selected-credits').addClass('btn-success');
        $('.min-credits-in-primary-area').addClass('btn-success');
        parsedCredits.forEach(item => {
            $('#selected-course-table tbody').attr(`credit-complete-${item.sap_acad_session_id}`, true);
        });
    }

    if (concentrationSet == 0) {
        $('.concentration-not-selected').removeClass('d-none');
        $('#concentration-name').addClass('d-none');
    } else {
        $('.concentration-not-selected').addClass('d-none');
        $('#concentration-name').removeClass('d-none');
    }

    let acadSessionCount = '<%- acadSessions.length %>';
    let completedCreditsCount = 0;
    let selectedCourseList = ('<%- selectCourse.length %>');
    let selectedCourseList1 = JSON.parse(`<%-JSON.stringify(selectCourse) %>`);
    let selectedCredits = 0;
    let count = 1;
    let studentCriteriaStatus = {
        areaCovered: 0,
        creditsPerArea: [],
        creditsPerSession: [],
        primaryArea:`${concentrationSet.name}`,
        totalCredit:0,
        isCriteriaMet: false,
        courseDetails:[]
    }

    $('#available-course-table').on('click', '.add-course', function () {

        let courseId = $(this).closest('tr').data('course-id');
        let area = $(this).closest('tr').data('area');
        let course = $(this).closest('tr').data('course-name');
        let acadSession = $(this).closest('tr').data('acad-session');
        let credits = $(this).closest('tr').data('credits');
        let acadSessionId = $(this).closest('tr').data('acad-session-id');
        let selectedCourseCredit = $('#selected-course-credits').text();
        let maxCreditPerArea = $('#max-credits-per-area').text();
        let rowId = $(this).closest('tr').find('td:first-child').text();
        let selectedTableLenght = $('#selected-course-table tbody tr').length;
        count = selectedTableLenght + 1;
        let areaCountText = concentrationSet.areasCover;

        console.log('concentrationSet', concentrationSet);
        console.log('parsedCredits', parsedCredits);
        console.log('studentCriteriaStatus', studentCriteriaStatus);
        console.log('selectedCourse', selectedCourse);

        //Check for max credit as per concentration setting
        if (studentCriteriaStatus.totalCredit + Number(credits) > totalCredits) {
            alert('You have reached the maximum credit limit');
            return;
        }

        //To check max credit per area
        let isMaxCreditUnderLimit = true;
        studentCriteriaStatus.creditsPerArea.filter(obj => {
            if (obj.credits + credits > concentrationSet.maxCreditsPerArea && obj.area == concentrationSet.name) {
                isMaxCreditUnderLimit = false
                return;
            }
        });

        //To check max credit in a session
        let isMaxCreditInSessionUnderLimit = true;
        studentCriteriaStatus.creditsPerSession.forEach(obj => {
            parsedCredits.forEach(targetCredits => {
                if (obj.acadSessionId == targetCredits.id && obj.acadSessionId == acadSessionId) {
                    if (Number(obj.credits) + Number(credits) > targetCredits.credits) {
                        isMaxCreditInSessionUnderLimit = false;
                        return;
                    }
                } 
            });
        
            if (isMaxCreditInSessionUnderLimit == false) {
                return;
            }
        });

        if(!isMaxCreditUnderLimit) {
            alert(`You have reached the maximum credit limit for ${area} area`);
            return;
        }else if(!isMaxCreditInSessionUnderLimit){
            alert(`You have reached the maximum credit limit for ${acadSession}`);
            return;
        }
        let studentCriteriaStatusLength = studentCriteriaStatus.creditsPerArea.length;
        studentCriteriaStatus.creditsPerArea.forEach((ele, idx) => {
            if (ele.area == area) {
                ele.credits += credits;
            } else if(studentCriteriaStatusLength == idx + 1) {
                studentCriteriaStatus.creditsPerArea.push({
                    area: area,
                    credits: credits
                });
            }
        })
        if(studentCriteriaStatusLength === 0){
            studentCriteriaStatus.creditsPerArea.push({
                    area: area,
                    credits: credits
                });
        }
        
        let studentCriteriaStatusSessionLength = studentCriteriaStatus.creditsPerSession.length;
        studentCriteriaStatus.creditsPerSession.forEach((ele, idx) => {
            if (ele.acadSessionId == acadSessionId) {
                ele.credits += credits;
            } else if(studentCriteriaStatusSessionLength == idx + 1) {
                studentCriteriaStatus.creditsPerSession.push({
                    acadSessionId: acadSessionId,
                    credits: credits
                });
            }
        })
        if(studentCriteriaStatusSessionLength === 0){
            studentCriteriaStatus.creditsPerSession.push({
                    acadSessionId: acadSessionId,
                    credits: credits
                });
        }

        //update totalCredit and areaCovered in the obj
        studentCriteriaStatus.totalCredit += credits;
        var minCreditAreaFilter = studentCriteriaStatus.creditsPerArea.filter(function(item) {
            return item.credits >= concentrationSet.minCreditsPerArea;
        });
        studentCriteriaStatus.areaCovered = minCreditAreaFilter.length;
        $('#selected-course-credits').text(Number(selectedCourseCredit) + Number(credits));
        $('.student-footer .area-status .area-status-span').text(studentCriteriaStatus.areaCovered);
        $(`.session-credit-points[data-acad-session-id="${acadSessionId}"]`).find('.credits-points').text(studentCriteriaStatus.creditsPerSession.find(obj => obj.acadSessionId == acadSessionId).credits);

        //push the course details in the studentCriteriaStatus
        studentCriteriaStatus.courseDetails.push({
            courseId: courseId,
            area: area,
            course: course,
            acadSession: acadSession,
            credits: credits,
            acadSessionId: acadSessionId
        });



        //Validate the studentCriteriaStatus for the overall criteria eligibility



        let ajaxTable = `
                <tr data-course-id="${courseId}" data-area="${area}" data-course-name="${course}" data-acad-session="${acadSession}" data-credits="${credits}" data-acad-session-id="${acadSessionId}">
                    <td class="index-row-demand-estimation">${count++}</td>
                    <td>${area}</td>
                    <td>${course}</td>
                    <td>${acadSession}</td>
                    <td>${credits}</td>
                    <td><button class="btn btn-danger cancel-course" title="Remove"><i class="fa-solid fa-xmark"></i></button></td>
                </tr>
            `;
         
        $("#selected-course-table tbody tr").find('td[colspan ="6"]').remove()
        $("#selected-course-table tbody").append(ajaxTable);
        $(this).closest('tr').remove();

      
    });

    $('#selected-course-table').on('click', '.cancel-course', function () {
    
        let acadSessionId = $(this).closest('tr').data('acad-session-id');
        let credits = $(this).closest('tr').data('credits');
        let area = $(this).closest('tr').data('area');
        let id = $(this).closest('tr').data('course-id');
        let acadSession = $(this).closest('tr').data('acad-session');
        let course = $(this).closest('tr').data('course-name');
        let rowId = $(this).closest('tr').find('td:first-child').text();
        let annualCredits = $('#yearly-credits').text();
        let minCreditPrimaryArea = $('#min-credits-in-primary-area').text();
        let selectedCourseCredit = $('#selected-course-credits').text();

        //update studentCriteriaStatus
        studentCriteriaStatus.totalCredit -= credits;
        //in creditsPerArea array find the area and update the credits and if credits is 0 remove the object
        studentCriteriaStatus.creditsPerArea.forEach((ele, idx) => {
            if (ele.area == area) {
                ele.credits -= credits;
                if (ele.credits == 0) {
                    studentCriteriaStatus.creditsPerArea.splice(idx, 1);
                }
            }
        });
        //in creditsPerSession array find the acadSessionId and update the credits and if credits is 0 remove the object
        studentCriteriaStatus.creditsPerSession.forEach((ele, idx) => {
            if (ele.acadSessionId == acadSessionId) {
                ele.credits -= credits;
                if (ele.credits == 0) {
                    studentCriteriaStatus.creditsPerSession.splice(idx, 1);
                }
            }
        });
        studentCriteriaStatus.areaCovered = studentCriteriaStatus.creditsPerArea.length;
        console.log('studentCriteriaStatus', studentCriteriaStatus.creditsPerSession);
        //update in #selected-course-credits, .session-credit-points, .area-status-span, criteria-status 
        $('#selected-course-credits').text(studentCriteriaStatus.totalCredit);
        $('.student-footer .area-status .area-status-span').text(studentCriteriaStatus.areaCovered);
        if(studentCriteriaStatus.creditsPerSession.length > 0){

            $(`.session-credit-points[data-acad-session-id="${acadSessionId}"]`).find('.credits-points').text(
                studentCriteriaStatus.creditsPerSession.some(function(ele) {
                    return ele.acadSessionId === acadSessionId;
                }) ? studentCriteriaStatus.creditsPerSession.find(obj => obj.acadSessionId == acadSessionId).credits : 0
            );
        }else{
            $('.session-credit-points[data-acad-session-id="'+acadSessionId+'"]').find('.credits-points').text(0);
        }

       
        
        let count = 1;
        let ajaxTable = `
                <tr data-course-id="${id}"
                    data-area="${area}"
                    data-course-name="${course}"
                    data-acad-session="${acadSession}"
                    data-credits="${credits}"
                    data-acad-session-id="${acadSessionId}">
                    <td>${count++}</td>
                    <td>${area}</td>
                    <td>${course}</td>
                    <td>${acadSession}</td>
                    <td>${credits}</td>
                    <td><button class="btn btn-secondary add-course" data-area="${area}">Add</button></td>
                </tr>`;

        $("#available-course-table tbody").append(ajaxTable);

        $('.student-footer .criteria-status').removeClass('btn-success');
        $('.student-footer .criteria-status').addClass('btn-danger');
        $('.student-footer .criteria-status').html('CRITERIA NOT MET');
        $('.save-select-course').attr('disabled', 'disabled');
        $(this).closest('tr').remove();
       
    });

    $('#acad-session-change').on('change', function () {

        let acadSessionId = $(this).val();
    
        let ApiObj = {
            url: '/student/demand-estimation/courses-by-acad',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId
            },
            dataType: 'JSON'
        }

        ajaxApi(ApiObj).then(result => {
       
            let areaName = `<option selected disabled value="-1">--Select Area--</option>`;
            if (result.areaList.length > 0) {
                result.areaList.forEach(area => {
                    areaName += `<option value="${area.area_name}">${area.area_name}</option>`;
                });

            } else {
                areaName += `<option value="">No Area Found!</option>`;
            }

            $("#area-change").html(areaName);
            availableCourse(result.courseList);
            deleteSelectedCourse();
            $('#page-no').html(result.courseCount);
        });

    });

    $('#area-change').on('change', function () {
        let acadSessionId = $('#acad-session-change').val();
        let areaName = $(this).val();

        let ApiObj = {
            url: '/student/demand-estimation/courses-by-area',
            type: 'POST',
            data: {
                acadSessionId: acadSessionId,
                areaName: areaName
            },
            dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
           
            availableCourse(result.courseList);
            deleteSelectedCourse();
            $('#page-no').html(result.courseCount);
        })
    })

    function deleteSelectedCourse(deleteColumnId) {
        $('#selected-course-table tbody tr').each(function () {
            let columnId = Number($(this).children(':first-child').text());

            if (columnId > deleteColumnId) {
                $(this).children(':first-child').text(columnId - 1);
            }
        })
    }

  


    // function EnableAcadSession(acadSessionId) {
    //     $('#selected-course-table tbody tr').each(function () {
    //         let currentAcadSessionId = $(this).data('acad-session-id');
    //         let targetCreditPoints = $(`#credits-points-target-${currentAcadSessionId}`).text();
    //         let creditPoints = $(`#credits-points-${currentAcadSessionId}`).text();
    //         if (targetCreditPoints != creditPoints) {
    //             let deleteAcadSession = $('#selected-course-table tbody').attr(`delete-acad-session-${currentAcadSessionId}`);
    //             if (deleteAcadSession == undefined) {
    //                 $('#selected-course-table tbody').attr(`delete-acad-session-${currentAcadSessionId}`, true);
    //             }
    //         }
    //     });
    // }

    $(document).on('click', '.save-select-course', function () {
        let selectedCourseArray = [];
        $('#selected-course-table tbody tr').each((index, selectedCourse) => {
            let selectedCourses = {};
            let courseLid = $(selectedCourse).data('course-id');
            let studentLid = $('.student-id').text();

            selectedCourses.course_lid = courseLid;
            selectedCourseArray.push(selectedCourses);
        });

        let studentLid = $('#student-data').data('student-id');
        let roundId = $('.round-name').data('round-id');
        if (roundId == 0) {
            createToastMessage('This round is not created yet!');
        } else {
            let ApiObj = {
                url: '/student/demand-estimation/save',
                type: 'POST',
                data: { inputJSON: JSON.stringify(selectedCourseArray), studentLid: studentLid, roundLid: roundId },
                dataType: 'JSON'
            };

            ajaxApi(ApiObj)
                .then(result => {
                    createToastMessage(result.description);
                })
                .catch(error => {
                    createToastError(JSON.stringify(error.responseJSON.description));
                });
        }
    });


    $('#selected-course-table tr[data-acad-session-id]').each(function() {

        const acadSessionId = $(this).data('acad-session-id');    
        const messageContainers = $(`.credits-points-${acadSessionId}`);
        
        if (messageContainers.length >= 1) {
            const creditsValue = Number($(this).data('credits'));        
            const elementValue = Number($(this).data('credits')) || 0;        
            const currentText = Number($(messageContainers[0]).text()) || 0;
            $(messageContainers[0]).text(currentText + creditsValue);
        }

        if (messageContainers.length >= 2) {
            const creditsValue = Number($(this).data('credits'));        
            const elementValue = Number($(this).data('credits')) || 0;
            const currentText = Number($(messageContainers[1]).text()) || 0;
            $(messageContainers[1]).text(currentText + creditsValue);
        }
    }); 
});

function availableCourse(courseList) {
    
    $("#available-course-table tbody").empty();
    let courseArray = [];
    let maxCreditsOneAreas = $('#selected-course-table tbody').attr('max-credits-one-area');
    $('#selected-course-table tbody tr').each((index, element) => {
        let courseId = $(element).data('course-id');
        courseArray.push(courseId);
    });
    courseArray.forEach(item => {
        courseList = courseList.filter(course => course.id !== item);
    });
    let ajaxTable = ``;
    if (courseList.length > 0) {
        let count = 1;
        for (const course of courseList) {
            
            if (course.area_name == maxCreditsOneAreas) {
                disabledAddButton = 'disabled';
            }
            ajaxTable +=
                `<tr data-course-id="${course.id}" data-area="${course.area_name}" data-course-name="${course.course_name}" data-acad-session="${course.acad_session}" data-credits="${course.credits}" data-acad-session-id="${course.sap_acad_session_id}">
                    <td>${count++}</td>
                    <td>${course.area_name}</td>
                    <td>${course.course_name}</td>
                    <td>${course.acad_session}</td>
                    <td>${course.credits}</td>
                    <td><button class="btn btn-secondary add-course"  data-area="${course.area_name}" >Add</button></td>
                </tr>`;
        }
    }
    $("#available-course-table tbody").html(ajaxTable);
}

</script>
</main>
</body>
</html>
